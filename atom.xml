<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Endless August</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tchaikovdriver.github.io/"/>
  <updated>2018-10-02T17:42:35.546Z</updated>
  <id>https://tchaikovdriver.github.io/</id>
  
  <author>
    <name>TchaikovDriver</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EGL介绍与简单GLSurfaceView实现思路</title>
    <link href="https://tchaikovdriver.github.io/2018/10/03/EGL%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%AE%80%E5%8D%95GLSurfaceView%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/"/>
    <id>https://tchaikovdriver.github.io/2018/10/03/EGL介绍与简单GLSurfaceView实现思路/</id>
    <published>2018-10-02T17:38:36.000Z</published>
    <updated>2018-10-02T17:42:35.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EGL介绍与简单GLSurfaceView实现思路"><a href="#EGL介绍与简单GLSurfaceView实现思路" class="headerlink" title="EGL介绍与简单GLSurfaceView实现思路"></a>EGL介绍与简单GLSurfaceView实现思路</h1><p>[TOC]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文刘老师会讲GLView或者说GLSurfaceView的简单实现，旨在让大家在使用GLSurfaceView时能明白Android在OpenGL ES的使用这块为大家提供了多大的便利性，同时也能让大家了解，一个标准的GL环境是怎么创建的，GLSurfaceView总体的执行逻辑是怎么样的。</p><h2 id="EGL"><a href="#EGL" class="headerlink" title="EGL"></a>EGL</h2><h3 id="什么是EGL"><a href="#什么是EGL" class="headerlink" title="什么是EGL"></a>什么是EGL</h3><p>我们首先来看一下什么是EGL。EGL是一个介于Khronos（制定并发布图形API的组织）渲染API和native平台底层Window系统的中间层接口，它负责图像Context的管理、Surface/渲染buffer的创建、绑定以及rendering synchronization等事情。</p><p>下图是EGL中间层的示意图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/egl_framework.png" alt="EGL_Framework" title="">                </div>                <div class="image-caption">EGL_Framework</div>            </figure><h3 id="为什么用EGL"><a href="#为什么用EGL" class="headerlink" title="为什么用EGL"></a>为什么用EGL</h3><p>我们先从OpenGL的绘制条件讲起。OpenGL ES的运行需要一个rendering context和一个drawing surface。其中rendering context会存储OpenGL的状态信息；drawing surface是基本图元绘制的地方，它还指定了渲染时使用哪种类型的buffer（color buffer, depth buffer, stencil buffer)）。</p><p>EGL就提供了一套创建可给OpenGL等渲染API在上边绘制、创建context的surface的机制。</p><p>这套机制具体可以提供以下的功能：</p><ul><li>可以跟设备native windowing system交互的EGLDisplay</li><li>查询Drawing surface相关配置信息的接口(EGL14.eglGetConfigs, EGL14.eglGetConfigAttrib等)</li><li>同步不同渲染API的渲染结果（如OpenGL 和 OpenVG混合渲染的场景）</li><li>管理渲染资源（如纹理映射）</li></ul><p>另一方面，OpenGL是一套跨平台的图形API，本着单一责任原则，OpenGL只提供绘制图形的功能，因此，我们还需要一套跨平台的控制native显示设备的接口，这套接口就是EGL。</p><h3 id="EGL关键数据类型"><a href="#EGL关键数据类型" class="headerlink" title="EGL关键数据类型"></a>EGL关键数据类型</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/egl_framework_02.png" alt="EGL_Framework_02" title="">                </div>                <div class="image-caption">EGL_Framework_02</div>            </figure><ul><li><strong>EGLDisplay</strong>: 系统显示 ID 或句柄，是对显示设备的抽象，可以理解为一个前端的显示窗口</li><li><strong>EGLContext</strong>: OpenGL ES 图形上下文，它代表了OpenGL状态机，如果没有它，OpenGL指令就没有执行的环境。</li><li><strong>EGLSurface</strong>: 系统窗口或 FrameBuffer (包含Color Buffer, Stencil Buffer, Depth Buffer) 句柄 ，可以理解为一个后端的渲染目标窗口。</li><li><strong>EGLConfig</strong>: 创建<strong>EGLContext</strong>和<strong>EGLSurface</strong>所需要的配置，一般我们会在这里配置<strong>EGLSurface</strong> Color Buffer里RGBA各个颜色值所占的位数、Stencil Buffer和Depth Buffer的位数，以及指定能绘制到surface的渲染api（OpenGL ES, OpenVG等）。</li></ul><h3 id="EGL的基础用法"><a href="#EGL的基础用法" class="headerlink" title="EGL的基础用法"></a>EGL的基础用法</h3><ol><li>获取与app或者显示屏关联的display</li><li>初始化display</li><li>创建surface</li><li>创建context并与display关联起来，这个context会保存OpenGL的状态</li><li>将context “make current”（EGL14.makeCurrent)，后续的OpenGL操作将影响当前context的状态</li><li>使用OpenGL渲染</li><li>调用flush或者swap buffers，EGL就会告诉系统或者native window system展示渲染好的surface</li></ol><p>下图是EGLContext, EGLDisplay, EGLConfig和EGLSurface涉及的命令</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/egl_command.png" alt="EGL_Command" title="">                </div>                <div class="image-caption">EGL_Command</div>            </figure><h3 id="如何选择Surface"><a href="#如何选择Surface" class="headerlink" title="如何选择Surface"></a>如何选择Surface</h3><p>Surface实际上就是一个FrameBuffer，也就是渲染的地方。</p><ul><li>上屏渲染: EGL Window. 使用 <code>eglCreateWindowSurface</code>创建。在Android中eglCreateWindowSurface接口所需的参数之一EGLNativeWindow，一般建议用SurfaceTexture，至于SurfaceTexture，可以在SurfaceView或者TextureView中获取。</li><li>离屏渲染: EGL Pbuffers (Pixel buffer). 使用<code>eglCreatePbufferSurface</code>创建。还有一个是Pixmap，PixmapSurface上绘制的图会保存在内存中，且跨平台支持并不好，而PbufferSurface绘制的图是保存在显存中的，一般建议用PbufferSurface。</li></ul><h3 id="基础API说明"><a href="#基础API说明" class="headerlink" title="基础API说明"></a>基础API说明</h3><p>以下函数来自类 <code>EGL14</code></p><table><thead><tr><th style="text-align:left">api</th><th style="text-align:left">description</th></tr></thead><tbody><tr><td style="text-align:left">EGLDisplay eglGetDisplay(int id)</td><td style="text-align:left">id决定了我们能获取到什么display，默认用<code>EGL_DEFAULT_DISPLAY</code>。如果返回结果不是<code>EGL_NO_DISPLAY</code>的话，则表示获取成功。</td></tr><tr><td style="text-align:left">boolean eglInitialize(EGLDisplay dpy, int[] major, int majorOffset, int[] minor, int minorOffset)</td><td style="text-align:left">初始化<code>EGLDisplay</code>，并返回初始化成功或者失败，同时当前设备EGL的最小和最大版本会保存到major和minor中。如果初始化失败的话，可以通过<code>eglGetError()</code>获取error code</td></tr><tr><td style="text-align:left">int eglGetError()</td><td style="text-align:left">获取egl error code，error coder 的声明可以看<code>EGL14</code>，一般看到的有<code>EGL_BAD_CONTEXT</code>, <code>EGL_BAD_DISPLAY</code>等等。这些error code的信息可以到<a href="https://www.khronos.org/registry/EGL/specs/eglspec.1.4.pdf" target="_blank" rel="noopener">https://www.khronos.org/registry/EGL/specs/eglspec.1.4.pdf</a> 查阅。</td></tr><tr><td style="text-align:left">boolean eglChooseConfig(EGLDisplay dpy,     int[] attrib_list, int attrib_listOffset,     EGLConfig[] configs, int configsOffset, int config_size, int[] num_config, int num_configOffset)</td><td style="text-align:left">让EGL在我们指定的attribute list里，匹配出若干个符合我们需求的<code>EGLConfig</code>，匹配结果保存在configs里，结果数量保存在 num_conifg里。attribute可以在<a href="https://www.slideshare.net/Khronos_Group/egl-11" target="_blank" rel="noopener">https://www.slideshare.net/Khronos_Group/egl-11</a> 查阅。</td></tr><tr><td style="text-align:left">EGLSurface eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config, int[] surfaceAttrib, int attribOffset)</td><td style="text-align:left">创建离屏渲染用的<code>EGLSurface</code>，surfaceAttribute一般传<code>EGL_WIDTH</code>, <code>EGL_HEIGHT</code>, <code>EGL_RENDER_BUFFER</code>等值。如果返回的不是<code>EGL_NO_SURFACE</code>的话表示创建成功。</td></tr><tr><td style="text-align:left">EGLContext eglCreateContext(EGLDisplay dpy,  EGLConfig config, EGLContext sharedContext, int[] attrib, int attribOffset)</td><td style="text-align:left">创建<code>EGLContext</code>。如果不是创建共享<code>EGLContext</code>的话，sharedContext传<code>EGL_NO_CONTEXT</code>即可；attrib只接受一个参数：<code>EGL_CONTEXT_CLIENT_VERSION</code>，表示OpenGL ES Context的版本号。如果是OpenGL ES2就传2，3就传3。</td></tr><tr><td style="text-align:left">boolean eglQueryContext(EGLDisplay dpy,     EGLContext ctx, int attribute, int[] value,     int offset);</td><td style="text-align:left">查询<code>EGLContext</code>的属性值，这里只能查<code>EGL_CONTEXT_CLIENT_VERSION</code>，也就是ctx所用的OpenGL ES版本。</td></tr><tr><td style="text-align:left">boolean eglMakeCurrent(EGLDisplay dpy,     EGLSurface draw, EGLSurface read, EGLContext ctx )</td><td style="text-align:left">将<code>EGLContext</code>和<code>EGLSurface</code>关联起来</td></tr><tr><td style="text-align:left">boolean eglSwapBuffers(EGLDisplay dpy,     EGLSurface surface )</td><td style="text-align:left">这个函数的命名来自于传统的屏幕front和back buffer swap更新机制。如果surface是window surface，那么这个函数会把color buffer更新到native window上（即显示渲染结果）；如果是pixel buffer或者pixmap的话，eglSwapBuffers没有效果，你知道吧。</td></tr></tbody></table><h3 id="eglSwapBuffers流程"><a href="#eglSwapBuffers流程" class="headerlink" title="eglSwapBuffers流程"></a>eglSwapBuffers流程</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/egl_swap_buffer.png" alt="egl_swap_buffer" title="">                </div>                <div class="image-caption">egl_swap_buffer</div>            </figure><p>利用双缓冲进行Swap的时候，Display和Surface进行实际意义上的地址交换，来实现eglSwapBuffers的标准， 如上图的右侧所示。 上图的左侧表示，单缓冲Framebuffer的形式，Surface永远都在后端， 显示的永远是Display，在GPU出现后已不使用。</p><p>在Android平台上，<code>EGLSurface</code>其实代表了一个从NativeWindow 申请到的一个Buffer（Dequeue操作）。当调用eglSwapBuffers时，对于一般应用窗口而言，NativeWindow将该Surface的Buffer 提交回去给SurfaceFlinger（Queue操作)，然后又重新从NativeWindow中重新Dequeue出来一个新的Buffer给eglSurface。而eglDisplay并不代表实际的意义。我们只是从接口上感觉是，surface和display进行了交换。</p><h2 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/GLView_render_process.png" alt="egl_drawing_process" title="">                </div>                <div class="image-caption">egl_drawing_process</div>            </figure><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>详见<a href="https://github.com/TchaikovDriver/GLViewDemo" target="_blank" rel="noopener">GLViewDemo</a> master分支的<code>GLThread</code>实现。</p><h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><p>原本<strong>Khronos</strong>官网上是有EGL 1.4的specification，链接如下：<br><a href="https://www.khronos.org/registry/EGL/specs/eglspec.1.4.pdf" target="_blank" rel="noopener">https://www.khronos.org/registry/EGL/specs/eglspec.1.4.pdf</a><br>但是不知道为什么有时候上不了，上不了的同学可以去<a href="https://github.com/TchaikovDriver/PublicFiles/blob/master/EGL/eglspec.1.4.pdf" target="_blank" rel="noopener">这里</a>下载。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EGL介绍与简单GLSurfaceView实现思路&quot;&gt;&lt;a href=&quot;#EGL介绍与简单GLSurfaceView实现思路&quot; class=&quot;headerlink&quot; title=&quot;EGL介绍与简单GLSurfaceView实现思路&quot;&gt;&lt;/a&gt;EGL介绍与简单GLS
      
    
    </summary>
    
    
      <category term="EGL" scheme="https://tchaikovdriver.github.io/tags/EGL/"/>
    
      <category term="GLSurfaceView" scheme="https://tchaikovdriver.github.io/tags/GLSurfaceView/"/>
    
      <category term="Android" scheme="https://tchaikovdriver.github.io/tags/Android/"/>
    
      <category term="GLThread" scheme="https://tchaikovdriver.github.io/tags/GLThread/"/>
    
  </entry>
  
  <entry>
    <title>1.6 OpenGL Camera</title>
    <link href="https://tchaikovdriver.github.io/2018/09/16/1-6-OpenGL-Camera/"/>
    <id>https://tchaikovdriver.github.io/2018/09/16/1-6-OpenGL-Camera/</id>
    <published>2018-09-16T12:32:51.000Z</published>
    <updated>2018-09-16T13:43:23.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-6-OpenGL-Camera"><a href="#1-6-OpenGL-Camera" class="headerlink" title="1.6 OpenGL Camera"></a>1.6 OpenGL Camera</h1><p>[TOC]</p><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在《1.6 OpenGL坐标系统》里，我曾经给出下集预告，说将会在下一篇文章里详细讲解Camera部分，刘老师从不食言，今天，我们就来研究一下Camera。</p><p>我们再来看一次这张图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/opengl_coordinate_systems.png" alt="OpenGLCoordinateSystem" title="">                </div>                <div class="image-caption">OpenGLCoordinateSystem</div>            </figure><p>在2.WORLD SPACE中，我们把Camera从$Y$轴正方向朝向$Y$轴负方向，这样取的景就是我们布置的模型世界的俯视图，这样摆放Camera就相当于给出一个View Matrix，使得顶点乘以这个矩阵后，能变换到俯视图里的位置。</p><p>所以，本文的主题就是如何设置我们的View Matrix。</p><h2 id="二、相机Camera"><a href="#二、相机Camera" class="headerlink" title="二、相机Camera"></a>二、相机Camera</h2><h3 id="1-确定相机位置与方向"><a href="#1-确定相机位置与方向" class="headerlink" title="1. 确定相机位置与方向"></a>1. 确定相机位置与方向</h3><p>我们先来思考一下，在三维空间里，我们怎么确立一个相机？显然，我们首先要确定位置（position），确定位置以后，我们还要确定方向（direction），也就是视角。位置可以用坐标点来表示，而方向则可以用空间内任意一个坐标点跟位置坐标点联合表示（即向量）：</p><p>$position = (x_p, y_p, z_p)$</p><p>$target = (x_t, y_t, z_t)$</p><p>我们的方向direction就可以用向量来表示：</p><p>$\vec{direction} = target - position = (x_t - x_p, y_t - y_p, z_t - z_p)$</p><p>这时候我们就碰到一个问题：我们怎么确定相机的正反？想象一下，我们现在拿着相机对着某处拍照，正常情况下我们是正着拿相机（顶朝上），拍摄出来的照片自然是正的；当我们把相机反过来（顶朝下），拍照出来的照片就相当于做了180度旋转一样。因此，我们还需要额外的参数来确定相机的“正反”。</p><p>除了方向向量以外，我们还需要指定相机顶部朝上和正右侧的向量来完全确定相机的“正反”。参照下图里的最后一张图，我们最终需要3个互相垂直的向量来确定相机的位置和方向：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://learnopengl.com/img/getting-started/camera_axes.png" alt="CameraVector" title="">                </div>                <div class="image-caption">CameraVector</div>            </figure><p>首先我们确定了$position = (0, 0, 2)$，随后我们的朝向原点拍摄，$target = (0, 0, 0)$，这时候我们就先确立了第一个方向向量$direction = position - target = (0, 0, 2)$，注意这里的$direction$跟拍摄方向是相反的，后边会解释原因，为了方便后边的计算，我们把$direction$向量标准化为单位向量（模为1的向量）：</p><p>$direction = \frac{direction}{||direction||} = \frac{(0, 0, 2)}{2} = (0, 0, 1)$</p><p>接着，我们需要确定相机的$right$向量，以表示相机的右侧，这里会用到向量叉积的特性，这里我们先简单地回顾一下向量叉积和右手定则：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/right_hand_principle.jpg" alt="右手定则" title="">                </div>                <div class="image-caption">右手定则</div>            </figure><p>我们做叉积$\vec{C} = \vec{A} \times \vec{B}$的时候，首先要确定向量的方向，我们将大拇指以外的四根手指指向$\vec{A}$，然后四指向$\vec{B}$向量方向弯曲，此时，大拇指指向的方向就是向量叉积得到的新向量$\vec{C}$的方向。更多关于向量叉积的内容请参阅《1.4 线性代数基础与矩阵变换原理》。</p><p>回到我们的Camera，我们要求相机的右方向，也就是$\vec{right}$，而我们已经有了$\vec{direction}$向量了，利用叉积的性质，我们定义一个$\vec{up} = (0, 1, 0)$，也就是垂直于$X$-$Z$平面的向量，我们用这两个向量做叉积，来求$\vec{right}$向量：</p><p>$\vec{right} = \vec{up} \times \vec{direction} = (1, 0, 0)$</p><p>可以看出，这里的$\vec{right}$碰巧是$X轴$的正方向的单位向量，碰巧而已，不要在意。</p><p>这下我们只剩下相机的顶部朝向，也就是$\vec{top}$向量了，聪明的各位应该能想到，我们同样用向量的叉积来求$\vec{top}$：</p><p>$\vec{top} = \vec{direction} \times \vec{right} = (0, 1, 0)$</p><p>这下，我们就得到了能确定相机位置、方向的三个单位向量：</p><p>$\vec{diretion} = (0, 0, 1)$</p><p>$\vec{right} = (1, 0, 0)$ </p><p>$\vec{top} = (0, 1, 0)$</p><p>这里需要特别注意的是，$\vec{direction}, \vec{right}, \vec{top}$这三个向量必须是单位向量，也就是向量的模必须为1，如果模不为1的话，需要将各个分量都除以该向量的模来得到单位向量。</p><h3 id="2-计算View-Matrix"><a href="#2-计算View-Matrix" class="headerlink" title="2. 计算View Matrix"></a>2. 计算View Matrix</h3><p>既然知道了相机三个方向的向量，我们就可以开始着手计算View Matrix了。</p><p>在这之前，我们要了解一下两个几何概念：</p><ul><li><p>标准正交基（Orthonormal Basis）</p><p>在欧几里德空间$R^3$中，向量$\vec{v_1} = (1, 0, 0),  \vec{v_2} = (0, 1, 0),  \vec{v_3} =(0, 0, 1)$是一组标准正交基，这三个<strong>基向量</strong>的线性组合能展开整个三维欧几里德空间。可以认为，一个坐标系统可以由一组标准正交基来定义。</p></li><li><p>右手坐标系</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/right_hand_coordinate.jpg" alt="right_hand_coordinate" title="">                </div>                <div class="image-caption">right_hand_coordinate</div>            </figure><p>接下来，我们研究一下相机调整视角的几何意义。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/opengl_coordinate_systems.png" alt="OpenGLCoordinateSystem" title="">                </div>                <div class="image-caption">OpenGLCoordinateSystem</div>            </figure><p>我们可以参考上图，当我们把相机在$Y$轴正方向垂直向负方向拍摄时，我们能看到世界的俯视图。这个过程实际上是把World Space里的坐标变换到View Space里，这个变换的几何意义就是把顶点坐标从以$(1, 0, 0), (0, 1, 0), (0, 0, 1)$为标准正交基的坐标系变换到以$\vec{right}, \vec{top}, \vec{direction}$为标准正交基的坐标系（这也是为什么上边我们要求三个向量都必须为单位向量）。</p><p>那么，我们这个坐标系转换要怎么做呢？</p><hr><h4 id="坐标系变换"><a href="#坐标系变换" class="headerlink" title="坐标系变换"></a>坐标系变换</h4><p>我们从线性代数的角度来解答这个问题。假设我们有一个父坐标空间$P$，其标准正交基为$\vec{v_1}, \vec{v_2}, \vec{v_3}$，有一个子坐标空间$C$，其标准正交基为$\vec{u_1}, \vec{u_2}, \vec{u_3}$。我们可以用父坐标空间的标准正交基的线性组合来表示子坐标空间的标准正交基：</p><p>$\vec{u_1} = a_{11}\vec{v_1} + a_{12}\vec{v_2} + a_{13}\vec{v_3}$</p><p>$\vec{u_2} = a_{21}\vec{v_1} + a_{22}\vec{v_2} + a_{23}\vec{v_3}$</p><p>$\vec{u_3} = a_{31}\vec{v_1} + a_{32}\vec{v_2} + a_{33}\vec{v_3}$</p><p>这个线性组合可以用矩阵来表示：</p><p>$\begin{bmatrix}\vec{u_1} \\ \vec{u_2} \\ \vec{u_3}\end{bmatrix} = M_{camera} \cdot \begin{bmatrix}\vec{v_1} \\ \vec{v_2} \\ \vec{v_3}\end{bmatrix} = \begin{bmatrix}a_{11} &amp; a_{12}  &amp; a_{13} \\ a_{21} &amp; a_{22}  &amp; a_{23} \\ a_{31} &amp; a_{32}  &amp; a_{33} \end{bmatrix} \cdot \begin{bmatrix}\vec{v_1} \\ \vec{v_2} \\ \vec{v_3}\end{bmatrix}$</p><p> 通过这个矩阵$M_{camera}$，我们能把坐标基从父坐标空间变换到子坐标空间，同理，我们的顶点也可以通过跟这个矩阵相乘来实现坐标系的变换（因为每个顶点都是标准正交基的线性组合）。</p><hr><p>现在我们知道了坐标系要怎么变换了，我们回到计算View Matrix环节。</p><p>由于我们World Space的标准正交基是$(1, 0, 0), (0, 1, 0), (0, 0, 1)$，而View Space的标准正交基是$\vec{right}, \vec{top}, \vec{direction}$，所以我们的坐标系变换矩阵就是</p><p>$M_{camera} = \begin{bmatrix}\vec{right}_x &amp; \vec{right}_y &amp; \vec{right}_z \\ \vec{top}_x &amp; \vec{top}_y &amp; \vec{top}_z \\ \vec{direction}_x &amp; \vec{direction}_y &amp; \vec{direction}_z \end{bmatrix}$</p><p>转成齐次坐标可用的形式就是</p><p>$M_{camera} = \begin{bmatrix}\vec{right}_x &amp; \vec{right}_y &amp; \vec{right}_z &amp; 0 \\ \vec{top}_x &amp; \vec{top}_y &amp; \vec{top}_z &amp; 0 \\ \vec{direction}_x &amp; \vec{direction}_y &amp; \vec{direction}_z &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1 \end{bmatrix}$</p><p>有人可能会问，为什么是$right, top, direction$这个顺序排列？因为我们的父坐标空间跟子坐标空间都是右手坐标系，标准正交基的排列顺序跟坐标点的x, y, z分量排列顺序一致。</p><p>通过矩阵$M_{camera}$，我们可以实现顶点坐标系的切换，相当于调整了视角。但是，我们还忽略了另一个关键因素——视距。视距怎么体现？我们可以想象，在World Space中，我们有一个在$Z$正半轴上的相机，相机朝向$Z$负半轴拍摄，当我们把相机向后移动（$Z$坐标增大），我们会感觉世界“远去”；当我们把相机向前移动（$Z$坐标减少），我们会感觉世界“靠近”。没错，其实相机的位置$position(x, y, z)$相当于将World Space坐标向反方向平移。</p><p>在《1.4 线性代数基础与矩阵变换原理》里，我们曾经介绍过平移矩阵，结合$position(x, y, z)$我们可以写出平移矩阵：</p><p>$M_{translation} = \begin{bmatrix}1 &amp; 0 &amp; 0 &amp; -position_x \\ 0 &amp; 1 &amp; 0 &amp; -position_y \\ 0 &amp; 0 &amp; 1 &amp; -position_z \\ 0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix}$</p><p>因为$M_{camera}$和$M_{translation}$都是线性变换，我们可以通过矩阵相乘来把这坐标系变换、平移变换组合在一起，组合结果就是我们想要的View Matrix：</p><p>$M_{view} = M_{camera} \cdot M_{translation} =  \begin{bmatrix}\vec{R}_x &amp; \vec{R}_y &amp; \vec{R}_z &amp; 0 \\ \vec{T}_x &amp; \vec{T}_y &amp; \vec{T}_z &amp; 0 \\ \vec{D}_x &amp; \vec{D}_y &amp; \vec{D}_z &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1 \end{bmatrix} \cdot \begin{bmatrix}1 &amp; 0 &amp; 0 &amp; -P_x \\ 0 &amp; 1 &amp; 0 &amp; -P_y \\ 0 &amp; 0 &amp; 1 &amp; -P_z \\ 0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix} $</p><p>其中$\vec{R} = \vec{right}, \vec{T} = \vec{top}, \vec{D} = \vec{direction}, \vec{P} = \vec{position}$</p><h2 id="三、OpenGL计算View-Matrix"><a href="#三、OpenGL计算View-Matrix" class="headerlink" title="三、OpenGL计算View Matrix"></a>三、OpenGL计算View Matrix</h2><p>前边我们已经讲了View Matrix的推导过程，那么在实际OpenGL开发中，我们是怎么获取View Matrix呢？</p><p>GLM提供了<code>glm::lookAt(glm::vec3&amp; eye, glm::vec3&amp; center, glm::vec3&amp; up)</code>函数供我们直接获取View Matrix，其中<code>eye</code>参数就是相机的$position$；<code>center</code>是相机的$target$，即相机注视的点，用于计算$\vec{direction}$；<code>up</code>参数，用于计算$\vec{right}$。</p><p>在上边的例子里，我们可以这样获取View Matrix：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">glm::mat4 viewMatrix = glm::lookAt(</span><br><span class="line">    glm::vec3(<span class="number">0.0f</span>, <span class="number">0.0f</span> <span class="number">2.0f</span>),</span><br><span class="line">    glm::vec3(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>),</span><br><span class="line">    glm::vec3(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>至此，我们的OpenGL入门系列已经走到尾声，看完OpenGL入门系列文章，相信大家对OpenGL的基础概念以及原理都会有一定程度的了解。往后就是OpenGL进阶系列，在进阶系列出来之前，大家可以去<a href="https://learnopengl.com/Getting-started/Creating-a-window" target="_blank" rel="noopener">https://learnopengl.com/Getting-started/Creating-a-window</a> 或者 <a href="https://learnopengl-cn.github.io/01%20Getting%20started/02%20Creating%20a%20window/" target="_blank" rel="noopener">https://learnopengl-cn.github.io/01%20Getting%20started/02%20Creating%20a%20window/</a> 加深对OpenGL的认识和了解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-6-OpenGL-Camera&quot;&gt;&lt;a href=&quot;#1-6-OpenGL-Camera&quot; class=&quot;headerlink&quot; title=&quot;1.6 OpenGL Camera&quot;&gt;&lt;/a&gt;1.6 OpenGL Camera&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;

      
    
    </summary>
    
      <category term="OpenGL ES" scheme="https://tchaikovdriver.github.io/categories/OpenGL-ES/"/>
    
    
      <category term="OpenGL ES" scheme="https://tchaikovdriver.github.io/tags/OpenGL-ES/"/>
    
  </entry>
  
  <entry>
    <title>1.5 OpenGL坐标系统</title>
    <link href="https://tchaikovdriver.github.io/2018/09/16/1-5-OpenGL%E5%9D%90%E6%A0%87%E7%B3%BB%E7%BB%9F/"/>
    <id>https://tchaikovdriver.github.io/2018/09/16/1-5-OpenGL坐标系统/</id>
    <published>2018-09-16T12:31:50.000Z</published>
    <updated>2018-09-16T13:42:33.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-5-OpenGL坐标系统"><a href="#1-5-OpenGL坐标系统" class="headerlink" title="1.5 OpenGL坐标系统"></a>1.5 OpenGL坐标系统</h1><p>[TOC]</p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>我们曾经在《1.1 基本概念介绍》里，简单地展示过OpenGL里的坐标转换过程（这张图将会在后边被多次引用）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/opengl_coordinate_systems.png" alt="OpenGLCoordinateSystem" title="">                </div>                <div class="image-caption">OpenGLCoordinateSystem</div>            </figure><p>在Vertex Shader运行后，我们可见的所有顶点都会转变成标准化设备坐标（Normal Device Coordinate，简称NDC），换句话说，每个顶点的x，y，z坐标都在[-1, 1]区间内，不在这个区间内的坐标都将不可见。我们一般只需要指定一个坐标范围，然后在Vertex Shader中将范围内的坐标转换为NDC，最后这些NDC坐标在OpenGL中会被传给光栅器（Rasterizer），最终变为屏幕上的二维坐标，也就是像素。</p><p>如图所示，将坐标转换为NDC，接着再转换成屏幕坐标的过程是分步进行的，类似于流水线（Pipeline）一样。将这个过程拆分成多个坐标系的转换过程有一个好，一些操作或者说变换在特定的坐标系里会更加易于进行。这些坐标系分别是：</p><ul><li>Local Space（Object Space），本地坐标空间</li><li>World Space，世界坐标空间</li><li>View Space（Eye Space），观察坐标空间</li><li>Clip Space</li><li>Screen Space</li></ul><p>在Vertex Shader中，一般顶点坐标是这样计算的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">layout (location = <span class="number">0</span>) in vec3 aPos;</span><br><span class="line"></span><br><span class="line">uniform mat4 model;</span><br><span class="line">uniform mat4 view;</span><br><span class="line">uniform mat4 projection;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">gl_Position = projection * view * model * vec4(aPos, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，所有顶点是依次经过model，view和projection矩阵变换最后得到NDC坐标的。</p><p>今天我们就详细讲讲这些坐标系统。</p><h2 id="二、-坐标系统"><a href="#二、-坐标系统" class="headerlink" title="二、 坐标系统"></a>二、 坐标系统</h2><h3 id="1-Local-Space"><a href="#1-Local-Space" class="headerlink" title="1. Local Space"></a>1. Local Space</h3><p>本地坐标空间是指创建一个空间模型时所用的坐标空间。大部分情况下，我们建立一个模型的时候，会默认以（0，0，0）为原点来建模。即便是做一个大工程，需要用到非常多的模型，我们也是从头开始，在本地坐标空间里把模型逐个搭建好，再在后续的坐标空间里进行整合。</p><p>以建立立方体模型为例，顶点坐标设置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> vertices[] = &#123; <span class="comment">// 一个立方体六个面，每个面由两个三角形组成，每个三角形三个点，共36个点</span></span><br><span class="line">-<span class="number">0.5f</span>, -<span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>, -<span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>,  <span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>,  <span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line">-<span class="number">0.5f</span>,  <span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line">-<span class="number">0.5f</span>, -<span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line"></span><br><span class="line">-<span class="number">0.5f</span>, -<span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>, -<span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>,  <span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>,  <span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line">-<span class="number">0.5f</span>,  <span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line">-<span class="number">0.5f</span>, -<span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line"></span><br><span class="line">-<span class="number">0.5f</span>,  <span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line">-<span class="number">0.5f</span>,  <span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line">-<span class="number">0.5f</span>, -<span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line">-<span class="number">0.5f</span>, -<span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line">-<span class="number">0.5f</span>, -<span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line">-<span class="number">0.5f</span>,  <span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0.5f</span>,  <span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>,  <span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>, -<span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>, -<span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>, -<span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>,  <span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line"></span><br><span class="line">-<span class="number">0.5f</span>, -<span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>, -<span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>, -<span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>, -<span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line">-<span class="number">0.5f</span>, -<span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line">-<span class="number">0.5f</span>, -<span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line"></span><br><span class="line">-<span class="number">0.5f</span>,  <span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>,  <span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>,  <span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line"><span class="number">0.5f</span>,  <span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line">-<span class="number">0.5f</span>,  <span class="number">0.5f</span>,  <span class="number">0.5f</span>,</span><br><span class="line">-<span class="number">0.5f</span>,  <span class="number">0.5f</span>, -<span class="number">0.5f</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-World-Space"><a href="#2-World-Space" class="headerlink" title="2. World Space"></a>2. World Space</h3><p>上一小节我们提出了在Local Space中建立模型，也就是说，基本上我们所有模型都是基于（0，0，0）原点建立的，如果直接把这些模型都绘制出来的话，可能最终效果我们会看到所有这些模型都堆在一个地方重叠了，这显然不是我们想要的效果。为了将每个模型放到它应在的位置，我们引入了世界坐标空间的概念。我们为某个模型定义一个偏移量（offset），例如说在X轴上偏移2，在Y轴上偏移5，在Z轴上偏移-15，也就是把这个模型做一个（2， 5，-15）的平移操作，平移后这个模型到了它应在的位置，这时候，我们可以认为它的顶点坐标是属于世界坐标空间的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/opengl_coordinate_systems.png" alt="OpenGLCoordinateSystem" title="">                </div>                <div class="image-caption">OpenGLCoordinateSystem</div>            </figure><p>让我们回顾一下这张图，刚刚说的平移操作其实就是model矩阵的变换结果，我们通过model矩阵，把某个模型的所有顶点统一地移动到了某个位置，这样我们就把模型顶点坐标从Local Space变换到World Space了。</p><p>Model变换矩阵不仅仅可以完成平移操作，还可以完成缩放、和旋转的操作。例如说我们想画多个立方体，这些立方体零散分布在空间中，这时其实就是在逐个绘制立方体时，给每个立方体一个model矩阵，每个model矩阵都有自己的平移、旋转、缩放参数，把model矩阵的值赋给Vertex Shader，这样最终绘制出来的效果就是每个立方体都在不同的位置，大小、方向各不相同，这就是世界空间坐标以及model矩阵变换的意义。</p><h3 id="3-View-Space"><a href="#3-View-Space" class="headerlink" title="3. View Space"></a>3. View Space</h3><p>观察坐标空间，在OpenGL中通常会理解为<strong>相机空间</strong>或者<strong>视觉空间</strong>。View Space是将World Space坐标转换成用户视角上的坐标。不妨想象一下在一个世界坐标空间内，我们放置了许多立方体，我们可以从一个屏幕上观察这些立方体，而屏幕内容就是来自一个摄像机（Camera），随着摄像机的移动，视角调整，我们可以从不同角度、不同方向观察这些立方体。</p><p>反过来看，我们移动摄像机，其实就相当于我们自身不动，移动的是整个世界坐标空间，通过矩阵变换，我们让特定的一些顶点靠近Camera，一些顶点远离Camera，这样，就实现了我们想要的调整视角、视距来观察世界的效果。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/opengl_coordinate_systems.png" alt="OpenGLCoordinateSystem" title="">                </div>                <div class="image-caption">OpenGLCoordinateSystem</div>            </figure><p>从图中可以看出，这些变换会存储在View Matrix中，View Matrix会将顶点坐标从World Space变换到View Space中。关于这部分我们会在下一篇文章里更加详细地展开讲解。</p><h3 id="4-Clip-Space"><a href="#4-Clip-Space" class="headerlink" title="4. Clip Space"></a>4. Clip Space</h3><p>当所有Vertex Shader运行完之后，OpenGL希望大部分坐标会落在一个特定的范围里，而不在这个范围内的坐标都会被裁剪掉（Clipped），这就是Clip Space命名缘由。裁剪多余的坐标后，剩余的坐标就会形成Fragment，也就是光栅化，最后出现在屏幕上。</p><p>跟之前的类似，我们会定义一个Projection Matrix来完成从View Space到Clip Space的坐标变换。在Projection Matrix里，我们指定了坐标的范围，例如[-1000, 1000]，接下来，我们定义的坐标范围在[-1000, 1000]内的顶点都会被按比例映射到[-1, 1]区间内；而在[-1000, 1000]区间外的顶点都会映射到[-1, 1]区间外，最终会被裁剪掉。</p><p>如果我们绘制的是一个图元（primitive），例如说一个三角形，这个三角形的顶点坐标跨度比较大，超出了我们定义的坐标范围的话，那么OpenGL会自动重新构造一个或者多个三角形（最终顶点范围都在[-1, 1]内）来适应坐标范围。</p><p>形象地说，Projection Matrix会创建一个视锥（Frustum），所有在视锥里的坐标点都会出现在屏幕上。这种将特定范围内的坐标映射到NDC坐标中的过程称为<strong>投影</strong>。当所有顶点坐标都转换到Clip Space之后，我们会把顶点坐标的x，y，z分量都除以齐次坐标的w分量，得到其原始坐标，这个过程叫作<strong>透视除法</strong>，了解一下。这一步会在Vertex Shader执行的最后阶段里自动执行。</p><p>在该阶段过后，我们的坐标就会映射为屏幕坐标（通过glViewport方法设置），并光栅化为Fragment输出。</p><p>根据表现形式的不同，投影一般分为两种，一种是正射投影（Orthographic Projection），另一种是透视投影（Perspective Projection），两种投影分别会建立不同的视锥体（Frustum），视觉效果的差别也会因为视锥体的不同而差异化。</p><h4 id="4-1-正射投影-Orthographic-Projection"><a href="#4-1-正射投影-Orthographic-Projection" class="headerlink" title="4.1 正射投影 Orthographic Projection"></a>4.1 正射投影 Orthographic Projection</h4><p>正射投影定义了一个长方体样式的视锥体，不在该视锥体范围内的顶点都会被裁剪掉（如图）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://learnopengl.com/img/getting-started/orthographic_frustum.png" alt="Orthographic Projection Frustum" title="">                </div>                <div class="image-caption">Orthographic Projection Frustum</div>            </figure><p>当创建正射投影矩阵时，我们需要指定视锥体的长、宽、高，具体来说就是X轴的坐标范围、Y轴的坐标范围以及近平面、远平面的距离。我们可以使用GLM的函数来获取正射投影矩阵：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glm::mat4 projection = glm::ortho(<span class="number">0.0f</span>, <span class="number">800.0f</span>, <span class="number">0.0f</span>, <span class="number">600.0f</span>, <span class="number">0.1f</span>, <span class="number">100.0f</span>);</span><br></pre></td></tr></table></figure><p>这样我们就定义了视锥体left为0，right为800，bottom为0，top为600，近平面距离0.1，远平面距离100f的长方体。</p><p>正射投影的思想非常直观，但是会造成不真实的视觉效果，因为它没有将<strong>透视</strong>效果考虑进去。正射投影跟透视投影的区别可以通过下图来辨别：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://learnopengl.com/img/getting-started/perspective_orthographic.png" alt="Differences between orthographic projection and perspective projection" title="">                </div>                <div class="image-caption">Differences between orthographic projection and perspective projection</div>            </figure><h4 id="4-2-透视投影-Perspective-Projection"><a href="#4-2-透视投影-Perspective-Projection" class="headerlink" title="4.2 透视投影 Perspective Projection"></a>4.2 透视投影 Perspective Projection</h4><p>透视投影其实已经在前边的文章里讲过了，这里简单复习一下。在现实生活中，我们知道远处的东西看起来更小，而近处的东西看起来更大；两条无限延伸、互相平行的直线会在地平线处汇聚在一起。这种奇妙的效果我们称之为<strong>透视</strong>。</p><p>透视投影矩阵会定义一个四棱锥柱样式的视锥体，除此之外还会修改每个顶点的w分量，距离Camera越远的顶点坐标的w分量就越大，被变换到Clip Space的坐标都会落到[-w, w]区间内，不在该区间内的顶点都会被裁剪掉。而因为OpenGL要求最终坐标需要在[-1, 1]区间内，所以所有坐标的所有分量都会除以w分量（透视除法），得到最终在[-1, 1]区间内的坐标。当w分量越大的时候，做透视除法后的坐标值就越小，这样物体在视觉上就越小，这也就是我们需要的“透视”效果。</p><p>我们可以通过GLM的内置函数建立透视投影矩阵：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glm::mat4 projection = glm::perspective(glm::radians(<span class="number">45.0f</span>), (<span class="keyword">float</span>)width/(<span class="keyword">float</span>)height, <span class="number">0.1f</span>, <span class="number">100.0f</span>);</span><br></pre></td></tr></table></figure><p>这里我们指定了fov（Field of View，视角大小）为45度（转为弧度），宽高比，近平面距离0.1f，远平面距离100f的一个视锥体：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://learnopengl.com/img/getting-started/perspective_frustum.png" alt="Perspective Projection Frustum" title="">                </div>                <div class="image-caption">Perspective Projection Frustum</div>            </figure><p>近平面距离一般设置为0.1f，远平面距离一般设置为100f。</p><p>至于如何根据这些参数来计算透视投影矩阵，请参阅《1.4 线代基础与矩阵变换原理》。</p><h3 id="5-Screen-Space"><a href="#5-Screen-Space" class="headerlink" title="5. Screen Space"></a>5. Screen Space</h3><p>在进行透视除法后，我们得到了NDC坐标，剩下的就交给OpenGL自行把NDC坐标转换成屏幕像素坐标，也就是把NDC坐标映射到Screen Space当中。在进行最后一步之前，我们需要通过<code>glViewport(x, y, width, height)</code>来告诉OpenGL我们展示用的窗口大小是多少，绘制时的横纵轴偏移值x，y分别是多少。</p><p>最终坐标的形式如下：</p><p>$\begin{bmatrix}x_w \\ y_w \\ z_w\end{bmatrix} = \begin{bmatrix}\frac{width}{2}x_{ndc} + x + \frac{width}{2} \\ \frac{height}{2}y_{ndc} + y + \frac{height}{2} \\ \frac{far - near}{2}z_{ndc} + \frac{far + near}{2}\end{bmatrix}$</p><p>可以通过结果推导出Viewport Matrix：</p><p>$\begin{bmatrix}\frac{width}{2} &amp; 0 &amp; 0 &amp; x + \frac{width}{2} \\ 0 &amp; \frac{height}{2} &amp; 0 &amp; y + \frac{height}{2} \\ 0 &amp; 0 &amp; \frac{far - near}{2} &amp; \frac{far + near}{2} \\ 0 &amp; 0&amp; 0&amp; 1 \end{bmatrix}$</p><p>大家可以画图比划一下。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>我们来结合下图总结一下OpenGL中坐标的变换过程。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/OpenGLpipeline.png" alt="OpenGLPipeline" title="">                </div>                <div class="image-caption">OpenGLPipeline</div>            </figure><p>首先，我们在Local Space里建立好模型，得到一系列model coordinates顶点，通过将这些顶点坐标左乘Model Matrix，我们对模型进行了平移、旋转和缩放，得到了world coordinates顶点；接下来，我们调整Camera，观察我们所需要的视角，这一步通过讲顶点坐标左乘View Matrix完成，得到eye coordinates顶点；然后，我们根据实际需要对模型进行投影变换（正射投影或者透视投影），讲顶点坐标左乘Projection Matrix得到clip coordinates，紧接着我们对齐次坐标形式的顶点的x, y, z, w分量都除以w分量，也就是做透视除法，得到NDC坐标；最后，我们通过<code>glViewport(x, y, width, height);</code>方法告诉OpenGL绘制窗口的大小，让OpenGL自行将NDC坐标转换成屏幕坐标，最后在屏幕上渲染出我们想要的图像。<br>上述local coordinates到clip coordinates的过程可以用这么一条式子表达：<br>$V_{clip} = M_{projection} \cdot M_{view} \cdot M_{model} \cdot V_{local}$</p><p>需要注意的是在OpenGL里，向量跟矩阵相乘是从右往左计算的，所以这里的计算过程实际上是$M_{model}$先与$V_{local}$相乘，计算结果再跟$M_{view}$相乘，最后再跟$M_{projection}$相乘。</p><p>至此，OpenGL从原始顶点数据到最终在屏幕上渲染出来的流水线过程讲诉完毕。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-5-OpenGL坐标系统&quot;&gt;&lt;a href=&quot;#1-5-OpenGL坐标系统&quot; class=&quot;headerlink&quot; title=&quot;1.5 OpenGL坐标系统&quot;&gt;&lt;/a&gt;1.5 OpenGL坐标系统&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、概述
      
    
    </summary>
    
      <category term="OpenGL ES" scheme="https://tchaikovdriver.github.io/categories/OpenGL-ES/"/>
    
    
      <category term="OpenGL ES" scheme="https://tchaikovdriver.github.io/tags/OpenGL-ES/"/>
    
  </entry>
  
  <entry>
    <title>1.4 OpenGL线性代数基础与矩阵变换原理</title>
    <link href="https://tchaikovdriver.github.io/2018/09/16/1-4-OpenGL%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%9F%BA%E7%A1%80%E4%B8%8E%E7%9F%A9%E9%98%B5%E5%8F%98%E6%8D%A2%E5%8E%9F%E7%90%86/"/>
    <id>https://tchaikovdriver.github.io/2018/09/16/1-4-OpenGL线性代数基础与矩阵变换原理/</id>
    <published>2018-09-16T12:30:45.000Z</published>
    <updated>2018-09-16T13:42:44.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-4-线代基础与矩阵变换原理"><a href="#1-4-线代基础与矩阵变换原理" class="headerlink" title="1.4 线代基础与矩阵变换原理"></a>1.4 线代基础与矩阵变换原理</h1><p>[TOC]</p><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>撰写本文的主要目的是讲述计算机图形学中，向量和点通过矩阵运算来实现平移、缩放、旋转以及透视投影的原理。虽然文章主标题是”OpenGL入门”，但是从范畴上来说，这些原理并不局限于OpenGL，因为这些都是计算机图形学的内容，无论是在OpenGL，DirectX还是Vulkan，这些原理都是通用的。<br>本文首先会讲一些前提背景知识，如一些线性代数的基础，接下来会依次讲解平移、缩放、旋转和透视投影的原理，这些原理都是基于前面说到的线性代数的基础，而且这些基础不难理解，大家看的时候毋须有畏难心理。<br>对于线性代数零基础的同学来说，如果碰到看不懂的地方，可以反复看第一小节的线性代数基础，同时可以作图辅助理解，再有问题也可以来找刘老师一起探讨。</p><h2 id="二、数学基础"><a href="#二、数学基础" class="headerlink" title="二、数学基础"></a>二、数学基础</h2><h3 id="1-向量"><a href="#1-向量" class="headerlink" title="1. 向量"></a>1. 向量</h3><h4 id="1-1什么是向量？"><a href="#1-1什么是向量？" class="headerlink" title="1.1什么是向量？"></a>1.1什么是向量？</h4><p>在计算机图形学中，向量（Vector）是最基本的运算元素之一。</p><p>向量是指具有大小（长度）和方向的量，印刷体一般用粗体表示，而手写体一般在向量名上方加箭头表示。如图所示，向量$\vec{BA}$的计算方法就是用A点坐标减去B点坐标，向量$\vec{BA}$的方向用箭头标出，长度（向量的模）为向量的所有分量的平方和的平方根。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/OpenGL_vector.jpg" alt="OpenGL_vector" title="">                </div>                <div class="image-caption">OpenGL_vector</div>            </figure><p>因为向量只是表示方向和大小的量，因此，向量保持方向不变，在空间内任意平移，平移后的向量都与平移前的向量相等。像上图画的一样，对向量$\vec{BA}$的点B平移到坐标原点得到向量<strong>$\vec{OA’}$</strong>，$\vec{OA’}$ = $\vec{BA}$。</p><h4 id="1-2-向量运算"><a href="#1-2-向量运算" class="headerlink" title="1.2 向量运算"></a>1.2 向量运算</h4><p>由于时间关系，大家可以认为向量没有除法这回事，所以我们这里会简单地说下向量的加法和乘法。</p><p>向量的乘法有两种，一种是点积（也叫点乘），另一种是叉积（也叫叉乘）。点积的计算结果是<strong>标量</strong>，而叉积的计算结果是<strong>矢量</strong>（也就是<strong>向量</strong>）。</p><p>如图，点积的计算实际上就是讲两个向量的每个分量分别相乘并求和，也可以通过计算两个向量的模的积再乘以两个向量夹角的余弦值得出。点积的几何意义在于可以计算两个向量之间的夹角。点积满足乘法的交换、分配和结合律。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/OpenGL_vector_dot_mul.jpg" alt="OpenGL_vector_dot_mul" title="">                </div>                <div class="image-caption">OpenGL_vector_dot_mul</div>            </figure><p>在3D图像空间中，向量叉积会用到单位向量（i, j, k），其计算方法如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/OpenGL_vector_x_mul_1.jpg" alt="OpenGL_vector_x_mul" title="">                </div>                <div class="image-caption">OpenGL_vector_x_mul</div>            </figure><p>在3D图像空间中，叉积的几何意义很有用，我们可以通过计算向量$\vec{a}$和$\vec{b}$的叉积得到垂直于向量$\vec{a}$和$\vec{b}$的向量$\vec{c}$，$\vec{c}$的模是$\vec{a}$和$\vec{b}$的模的乘积再乘以两个向量之间夹角的正弦值。光看图里的计算结果可能不太清楚计算方式，如果找不到规律的话，请找刘老师详谈。</p><h4 id="1-3-右手定则"><a href="#1-3-右手定则" class="headerlink" title="1.3 右手定则"></a>1.3 右手定则</h4><p>在物理学中，我们曾经用过“右手定则”：在磁场中，有一根通电导线，将手张开，拇指垂直于其余四根手指，让磁感线垂直于掌心所在的平面，拇指以外的四根手指指向导线电流方向，这样大拇指指向的方向就是导线的运动方向。</p><p>上面给出的例子只是“右手定则”在物理学中的一个应用场景，“右手定则”其实是用来判断向量叉积的方向的。</p><p>定义矢量$\vec{A}$×矢量$\vec{B}$的结果为一矢量$\vec{C}$，其大小为|$\vec{A}$||$\vec{B}$|sinθ，θ为$\vec{A}$与$\vec{B}$的夹角。其方向满足右手定则：伸直右手四指指向$\vec{A}$的方向，沿着小于π的角度将四指卷向$\vec{B}$的方向，则拇指的指向即为叉积$\vec{C}$的方向。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/right_hand_principle.jpg" alt="右手定则" title="">                </div>                <div class="image-caption">右手定则</div>            </figure><pre><code>撸牙签示意图</code></pre><h3 id="2-矩阵"><a href="#2-矩阵" class="headerlink" title="2. 矩阵"></a>2. 矩阵</h3><h4 id="2-1-何为矩阵？"><a href="#2-1-何为矩阵？" class="headerlink" title="2.1 何为矩阵？"></a>2.1 何为矩阵？</h4><p>矩阵，顾名思义，就是矩形的数列，在计算机图形学中，矩阵一般用于给向量做线性变换，不然矩阵也不会出现在我写的这篇文章里是吧。</p><h4 id="2-2-矩阵运算"><a href="#2-2-矩阵运算" class="headerlink" title="2.2 矩阵运算"></a>2.2 矩阵运算</h4><p>我就不造轮子了，有关矩阵的运算（加、减、数乘、乘法、转置）可以看<a href="https://baike.baidu.com/item/%E7%9F%A9%E9%98%B5/18069?fr=aladdin" target="_blank" rel="noopener">这里</a>。</p><h3 id="3-齐次坐标"><a href="#3-齐次坐标" class="headerlink" title="3. 齐次坐标"></a>3. 齐次坐标</h3><p>在“矩阵”小节里，我们知道了点坐标可以写为$[x, y, z]$，那我们怎么去区分点和向量？这时候我们就引入了“齐次坐标”的概念，齐次坐标就是将一个原本是n维的向量用一个n+1维的向量来表示，是指一个用于投影几何里的坐标系统。</p><p>《计算机图形学（OpenGL版）》的作者F.S. Hill Jr.曾经说过：“齐次坐标表示是计算机图形学的重要手段之一，它既能够用来明确区分向量和点，同时也更易用于进行仿射（线性）几何变换。”</p><p>那么，齐次坐标是如何区分点和向量的呢？非常简单，齐次坐标引入了w分量，若三维空间里的一个点坐标是[x, y, z]的话，那么其齐次坐标就表示为$[x, y, z, 1]$或者$[wx, wy, wz, w] (w \neq 0)$；如果一个向量是$[x, y, z]$的话，那么该向量的齐次坐标表示形式则是$[x, y, z, 0]$。我们随时可以通过截掉最后的$w$分量来获取原本的点/向量，而且我们还可以通过$w$分量来区分点和向量，这是齐次坐标的其中一个好处，另一个好处（更易于进行线性几何变换），会在下边提及。</p><h3 id="4-三角函数"><a href="#4-三角函数" class="headerlink" title="4.三角函数"></a>4.三角函数</h3><p>这个大家肯定都不陌生，给大家复习一下：</p><p>$cos(α + β) = cosαcosβ - sinαsinβ \\ cos(α - β) = cosαcosβ + sinαsinβ \\ sin(α + β) = sinαcosβ + cosαsinβ \\ sin(α - β) = sinαcosβ - cosαsinβ$</p><h2 id="三、线性变换"><a href="#三、线性变换" class="headerlink" title="三、线性变换"></a>三、线性变换</h2><h3 id="什么是线性变换"><a href="#什么是线性变换" class="headerlink" title="什么是线性变换"></a>什么是线性变换</h3><p>线性变换的定义可以看<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2/5904192?fr=aladdin" target="_blank" rel="noopener">这里</a></p><p>假设线性空间V上的一个变换$A$为线性变换，对于V中的任意元素$\vec{a}$，$\vec{b}$和数域$P$中的任意$k$，都有</p><p>$A(\vec{a}+\vec{b}) = A(\vec{a}) + A(\vec{b}) \\ A(k\vec{a}) = kA(\vec{a})$</p><h3 id="1-平移"><a href="#1-平移" class="headerlink" title="1.平移"></a>1.平移</h3><h4 id="1-1-推导"><a href="#1-1-推导" class="headerlink" title="1.1 推导"></a>1.1 推导</h4><p>我们知道，在欧几里德空间（也就是我们常用的直角坐标系、三维空间坐标系等）里，向量的平移可以通过向量加法来实现。像下图的$\vec{OA’}$平移到$\vec{AB}$仅需加一个向量$\vec{OA}$就可以了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/vector_addition.png" alt="VectorAddition" title="">                </div>                <div class="image-caption">VectorAddition</div>            </figure><p>我们不难看出，向量的平移可以用如下式子表示：</p><p>$\begin{bmatrix}x \\ y \\ z\end{bmatrix} + \begin{bmatrix}T_x \\ T_y \\ T_z\end{bmatrix} = \begin{bmatrix}x + T_x \\ y + T_y \\ z + T_z\end{bmatrix}$</p><p>其中$T_x$，$T_y$，$T_z$分别是向量在$X$，$Y$，$Z$轴上的平移量。</p><p>在线性代数中，一个变换通常是用矩阵x向量的形式来表达，而且GPU对于矩阵乘法的计算非常高效，所以我们总是希望对向量/坐标的变换能用矩阵乘法来实现。</p><p>假设存在一个矩阵$A$，$A$乘以一个三维顶点的坐标：</p><p>$A\begin{bmatrix}x \\ y \\ z\end{bmatrix} = \begin{bmatrix}a_{11} &amp;&amp; a_{12} &amp;&amp; a_{13} \\ a_{21} &amp;&amp; a_{22} &amp;&amp; a_{23} \\ a_{31} &amp;&amp; a_{32} &amp;&amp; a_{33} \end{bmatrix} \begin{bmatrix}x \\ y \\ z\end{bmatrix} = \begin{bmatrix}a_{11}x &amp;&amp; a_{12}y &amp;&amp; a_{13}z \\ a_{21}x &amp;&amp; a_{22}y &amp;&amp; a_{23}z \\ a_{31}x &amp;&amp; a_{32}y &amp;&amp; a_{33}z \end{bmatrix} $</p><p>可以看出，无论矩阵$A$里的各个元素取什么值，我们都只能得到$x$，$y$，$z$的线性组合，无法得到一个$x$，$y$，$z$加上一个常数的结果。这时候，齐次坐标的优良特性就凸显出来了。</p><p>首先我们先把向量$[x, y, z]$转成齐次坐标的形式$[x, y, z, 1]$，对于这样的坐标，我们很简单就能拼出符合我们预期的矩阵：</p><p>$A\begin{bmatrix}x \\ y \\ z\end{bmatrix} = \begin{bmatrix}1 &amp; 0 &amp; 0 &amp; T_x \\ 0 &amp; 1 &amp; 0 &amp; T_y \\ 0 &amp; 0 &amp; 1 &amp; T_z \\ 0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix} \begin{bmatrix}x \\ y \\ z \\ 1\end{bmatrix} = \begin{bmatrix}x + T_x \\ y + T_y \\ z + T_z \\ 1\end{bmatrix}$</p><p>这样，矩阵$A$就是我们所需要的能实现平移顶点的变换矩阵。</p><h4 id="1-2-OpenGL-ES计算平移矩阵"><a href="#1-2-OpenGL-ES计算平移矩阵" class="headerlink" title="1.2 OpenGL ES计算平移矩阵"></a>1.2 OpenGL ES计算平移矩阵</h4><p>在OpenGL ES中，计算平移矩阵的方法很简单，几句代码就搞定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化矩阵</span></span><br><span class="line"><span class="keyword">float</span>[] matrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</span><br><span class="line">Matrix.setIdentityM(m, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 计算平移矩阵</span></span><br><span class="line">Matrix.translateM(m: matrix, offset: <span class="number">0</span>, x: <span class="number">3f</span>, y: <span class="number">2f</span>, z: <span class="number">1f</span>);</span><br></pre></td></tr></table></figure><p>这样我们就能得到一个能把顶点在X轴上平移3，在Y轴上平移2，在Z轴上平移1的变换矩阵。</p><p>我们不妨看一下里边的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">translateM</span><span class="params">(<span class="keyword">float</span>[] m, <span class="keyword">int</span> mOffset, <span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> mi = mOffset + i;</span><br><span class="line">            m[<span class="number">12</span> + mi] += m[mi] * x + m[<span class="number">4</span> + mi] * y + m[<span class="number">8</span> + mi] * z;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按实现代码来写矩阵的话，我们会得到$\begin{bmatrix}1 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1 &amp; 0 \\ T_x &amp; T_y &amp; T_z &amp; 1\end{bmatrix}$，为什么这跟我们推导的矩阵不一样？其实在OpenGL里，矩阵元素排序采用的是以列为主的顺序（column major order），我们不难发现，其实这个矩阵跟我们上面推导的矩阵是互为转置的关系，假设我们推导的矩阵为M，OpenGL的矩阵为A，那么$M = A^T$。</p><h3 id="2-缩放"><a href="#2-缩放" class="headerlink" title="2.缩放"></a>2.缩放</h3><h4 id="2-1-推导"><a href="#2-1-推导" class="headerlink" title="2.1 推导"></a>2.1 推导</h4><p>如图，向量$\vec{OP}$在x和y方向上都放大了1.5倍就得到了向量 $\vec{OP_1}$，坐标从(2,1)变换成了(3, 1.5)。这种缩放方式比较符合我们常识中的「放大」或「缩小」，即各个维度上都「放大」或「缩小」相同的倍数。如果在3D空间中的一个对象的各个顶点都「放大」或「缩小」相同的倍数，那么这个3D对象本身就「放大」或「缩小」了相应的倍数。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/vector_scale_1.png" alt="向量缩放" title="">                </div>                <div class="image-caption">向量缩放</div>            </figure><p>但是，OpenGL ES里的缩放变换可以表达更一般的情形，也就是各个维度上缩放不同的倍数。还是以上图2维向量为例，向量$\vec{OP}$在$x$方向上缩小为原来的0.5倍，在$y$方向上放大为原来的2倍，就得到了向量 $\vec{OP_2}$，坐标从(2, 1)变换成了(1, 2)，这也是一种缩放变换。</p><p>从上面的例子可见，缩放变换就是把各个维度的坐标分别「放大」或「缩小」一个倍数。扩展到3D空间，仍然使用4维的齐次坐标，缩放操作用矩阵乘法可以写成：</p><p>$\begin{bmatrix}S_x &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; S_y &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; S_z &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix} \begin{bmatrix}x \\ y \\ z \\ 1\end{bmatrix} = \begin{bmatrix}S_xx\\ S_yy \\ S_zz\\ 1\end{bmatrix}$</p><p>缩放比较简单，没啥好说的。</p><h4 id="2-2-OpenGL-ES计算缩放矩阵"><a href="#2-2-OpenGL-ES计算缩放矩阵" class="headerlink" title="2.2 OpenGL ES计算缩放矩阵"></a>2.2 OpenGL ES计算缩放矩阵</h4><p>计算缩放矩阵同样灰常简单，初始化矩阵的代码就不放出来了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Matrix.scaleM(m: matrix, offset: <span class="number">0</span>, x: <span class="number">1f</span>, y: <span class="number">1.5f</span>, z: <span class="number">2f</span>);</span><br></pre></td></tr></table></figure><p>这样我们就能得到一个能把顶点y坐标放大1.5倍，z坐标放大2倍的缩放矩阵了。我们再来看里边的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scaleM</span><span class="params">(<span class="keyword">float</span>[] m, <span class="keyword">int</span> mOffset, <span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> mi = mOffset + i;</span><br><span class="line">            m[     mi] *= x;</span><br><span class="line">            m[ <span class="number">4</span> + mi] *= y;</span><br><span class="line">            m[ <span class="number">8</span> + mi] *= z;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样这里的矩阵也是跟我们的推导矩阵是互为转置的关系，但是因为缩放矩阵只在对角线上有元素，所以这个矩阵转置前和转置后是一样的。</p><h3 id="3-旋转"><a href="#3-旋转" class="headerlink" title="3.旋转"></a>3.旋转</h3><h4 id="3-1-围绕坐标轴旋转"><a href="#3-1-围绕坐标轴旋转" class="headerlink" title="3.1 围绕坐标轴旋转"></a>3.1 围绕坐标轴旋转</h4><p>旋转是相对平移和缩放来说，比较复杂的一种线性变换。在OpenGL ES中，计算旋转矩阵一般是通过一下语句实现：</p><p><code>Matrix.rotateM(matrix: mMVPMatrix, offset: 0, angle: 30f, x: 0f, y: 0f, z: 1f);</code></p><p>上面的语句就是计算围绕向量$[0, 0, 1]$旋转30度的变换矩阵，也就是围绕$Z$轴旋转30度。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/point_rotation.jpg" alt="PointRotation" title="">                </div>                <div class="image-caption">PointRotation</div>            </figure><p>从上面的示意图我们可以看出，点$P(x, y, z)$围绕$Z$轴旋转θ度得到点$P’(x’, y’, z)$，$z$坐标没有任何变化，我们可以把点$P$和点$P’$投影到$X$-$Y$平面上，得到点$Q$和点$Q’$，$\vec{OQ}$和$\vec{OQ’}$的夹角也等于$θ$。这样，我们就把问题简化成平面几何了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/point_rotation_xy_conduct.jpg" alt="PointRotationXYConduct" title="">                </div>                <div class="image-caption">PointRotationXYConduct</div>            </figure><p>我们通过简单的几何知识可以计算出旋转后的P’坐标与P坐标的关系，计算结果显示，x’和y’都是x和y的线性组合，因此我们可以通过矩阵来表示这个变换：</p><p>$M \cdot \begin{bmatrix}x \\ y \\ z \\ 1\end{bmatrix} = \begin{bmatrix}xcosθ + ysinθ \\ -xsinθ + ycosθ \\ z \\ 1\end{bmatrix} $</p><p>$M = \begin{bmatrix}cosθ &amp; sinθ &amp; 0 &amp; 0 \\ -sinθ &amp; cosθ &amp; 0 &amp; 0 \\ 0 &amp; 0  &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix}$</p><p>矩阵$M$就是我们需要的，将三维空间内任意一个顶点$P$围绕$Z$轴旋转$θ$度得到新顶点$P’$的变换矩阵。</p><p>同理，我们不难得出围绕其他坐标轴旋转的变换矩阵：</p><p>$M = \begin{bmatrix}cosθ &amp; 0 &amp; sinθ &amp; 0 \\ 0 &amp; 1 &amp; 0 &amp; 0 \\ -sinθ &amp; 0 &amp; cosθ &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix}$ 围绕$Y$轴旋转</p><p>$M = \begin{bmatrix}1 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; cosθ  &amp; sinθ &amp; 0 \\ 0 &amp; -sinθ &amp; cosθ &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix}$ 围绕$X$轴旋转</p><h4 id="3-2-围绕任意向量旋转"><a href="#3-2-围绕任意向量旋转" class="headerlink" title="3.2 围绕任意向量旋转"></a>3.2 围绕任意向量旋转</h4><p>上面我们讲了如何求围绕坐标轴旋转的变换矩阵，但是这种旋转方式属于特殊案例，在实际开发中，我们更多地会围绕某个非坐标轴的向量旋转，这里的计算就比上面的特殊情况复杂得多。</p><p>先放结论，在三维空间中任意一顶点/向量$P$围绕任意一个向量$V$旋转$θ$度得到新顶点/向量$P’$的变换矩阵如下：</p><p>$M = \begin{bmatrix}x^2(1-cosθ) + cosθ &amp; xy(1-cosθ)-zsinθ &amp; xz(1-cosθ) + ysinθ &amp; 0 \\ xy(1-cosθ) + zsinθ &amp; y^2(1-cosθ) + cosθ &amp; yz(1-cosθ)-xsinθ &amp; 0 \\ zx(1-cosθ)-ysinθ &amp; yz(1-cosθ)+xsinθ &amp; z^2(1-cosθ)+cosθ &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix}$</p><p>我们不难看出，得到这个变换矩阵的过程会比较繁琐，但是没关系，刘老师会尽可能把推导过程讲诉清楚。</p><p>假设我们要对三维空间里的向量$\vec{v}$围绕某个单位向量（向量的模为1）$\vec{r}$旋转$θ$度，可以给出这样的图像：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/vector_rotation_general_pic_1.jpg" alt="VectorRotationPic1" title="">                </div>                <div class="image-caption">VectorRotationPic1</div>            </figure><p>首先，我们把向量$\vec{v}$分解为向量$\vec{v_{||}}$的和向量$\vec{v_⊥}$的和：</p><p>$\vec{v} = \vec{v_{||}} + \vec{v_⊥}$                               _式1_</p><p>其中$\vec{v_{||}}$是与$\vec{r}$平行的向量，$\vec{v_⊥}$是与$\vec{r}$互相垂直的向量。利用向量点积的几何意义，我们可以得出$\vec{v_{||}}$的表达式：</p><p>$\vec{v_{||}} = (\vec{v} \cdot \vec{r}) \cdot \vec{r}$                         _式2_</p><p>根据_式1_，$\vec{v_⊥}$可以表现为如下形式：</p><p>$\vec{v_⊥} =  \vec{v} - \vec{v_{||}} $</p><p>$    = \vec{v}  - (\vec{v} \cdot \vec{r}) \cdot \vec{r}$                        _式3_</p><p>旋转变换为T</p><p>$T(\vec{v}) = T( \vec{v_{||}} + \vec{v_⊥})$</p><p>$= T( \vec{v_{||}}) + T(\vec{v_⊥})$</p><p>$= \vec{v_{||}} + T(\vec{v_⊥})$                         _式4_</p><p>计算变换矩阵的重点就在于计算$T(\vec{v_⊥})$。</p><p>我们焦点放到$\vec{v_⊥}$所在的平面上</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/vector_rotation_general_pic_2.jpg" alt="VectorRotationGeneral2" title="">                </div>                <div class="image-caption">VectorRotationGeneral2</div>            </figure><p>我们作一个辅助向量</p><p>$\vec{w} = \vec{r} × \vec{v_{⊥}}$</p><p>$= \vec{r} × \vec{v}$</p><p>这里先证明下为什么$\vec{r} × \vec{v_{⊥}} = \vec{r} × \vec{v}$</p><p>首先根据右手定则，$\vec{r} × \vec{v_{⊥}}$和$\vec{r} × \vec{v}$计算出的向量方向必然一致，接下来我们再证明两个向量的模一样即可。</p><p>$|\vec{r} × \vec{v_{⊥}}| = |\vec{r}| \cdot |\vec{v_{⊥}}| \cdot sin90$</p><p>$ = |\vec{v_{⊥}}| \cdot sin90$                               因为$\vec{r}$是单位向量，模为1</p><p>$= |\vec{v_{⊥}}|$                                             sin90 = 1</p><p>$|\vec{r} × \vec{v}| = |\vec{r}| \cdot |\vec{v}| \cdot sin\psi$</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/vector_rotation_general_pic_1.jpg" alt="VectorRotationPic1" title="">                </div>                <div class="image-caption">VectorRotationPic1</div>            </figure><p>可以看出，$|\vec{v}| \cdot sin\psi = |\vec{v_{⊥}}|$</p><p>所以$|\vec{r} × \vec{v}| = |\vec{r}| \cdot |\vec{v}| \cdot sin\psi = |{\vec{v_{⊥}}}|$</p><p>因此</p><p>$\vec{w} = \vec{r} × \vec{v_{⊥}} = \vec{r} × \vec{v}$                         _式5_</p><p>回到$\vec{v_{⊥}}$所在平面的向量分解示意图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/vector_rotation_general_pic_2.jpg" alt="VectorRotationGeneral2" title="">                </div>                <div class="image-caption">VectorRotationGeneral2</div>            </figure><p>我们可以得出</p><p>$T(\vec{v_{⊥}}) = cosθ\vec{v_{⊥}} + sinθ\vec{w}$</p><p>$= cosθ\vec{v_{⊥}} + sinθ(\vec{r} × \vec{v})$                 _式6_</p><p>联立_式2_，_式3_，_式4_，_式5_，_式6_，我们可以展开$T(\vec{v})$：</p><p>$T(\vec{v}) = \vec{v_{||}} + T(\vec{v_{⊥}})$</p><p>$= (\vec{v} \cdot \vec{r}) \cdot \vec{r} + cosθ\vec{v_{⊥}} + sinθ(\vec{r} × \vec{v})$</p><p>$= (\vec{v} \cdot \vec{r}) \cdot \vec{r} + cosθ[\vec{v} - (\vec{v} \cdot \vec{r}) \cdot \vec{r}]+ sinθ(\vec{r} × \vec{v})$</p><p>$= (\vec{v} \cdot \vec{r}) \cdot \vec{r} + cosθ\vec{v} - cosθ(\vec{v} \cdot \vec{r}) \cdot \vec{r}+ sinθ(\vec{r} × \vec{v})$</p><p>$= (1 - cosθ)(\vec{v} \cdot \vec{r}) \cdot \vec{r} + cosθ\vec{v} + sinθ(\vec{r} × \vec{v})$                   _式7_</p><p>看起来好像有点复杂，要求$T(\vec{v})$的话，我们就需要先求出$(\vec{r} × \vec{v})$和$(\vec{v} \cdot \vec{r}) \cdot \vec{r}$。</p><p>我们要求解$(\vec{r} × \vec{v})$，不妨先证明一下叉积的矩阵乘法表现形式：</p><p>设$\vec{a} = (x_1, y_1, z_1), \vec{b} = (x_2, y_2, z_2)$</p><p>单位向量  $\vec{i} = (1, 0, 0,) \\ \vec{j} = (0,1,0) \\ \vec{k} = (0, 0, 1)$</p><p>$\vec{a}×\vec{b}  = \begin{array} {|c c c|}  i &amp; j &amp; k  \\ x_1 &amp; y_1 &amp; z_1 \\ x_2 &amp; y_2 &amp; z_2 \end{array} = \begin{bmatrix} y_1z_2 - y_2z_1 \\ -(x_1z_2 - x_2z_1) \\ x_1y_2 - x_2yz \end{bmatrix} = \begin{bmatrix} y_1z_2 - y_2z_1 \\  x_2z_1 - x_1z_2  \\ x_1y_2 - x_2yz \end{bmatrix} $</p><p>将上述表达式写成左乘矩阵的形式：</p><p>$M \cdot \vec{b} = M \cdot \begin{bmatrix}x_2 \\ y_2 \\ z_2\end{bmatrix} = \begin{bmatrix} y_1z_2 - y_2z_1 \\  x_2z_1 - x_1z_2  \\ x_1y_2 = x_2yz \end{bmatrix} $</p><p>$M = \begin{bmatrix}0 &amp; -z_1 &amp; y_1 \\ z_1 &amp; 0 &amp; -x_1 \\ -y_1 &amp; x_1 &amp; 0\end{bmatrix}$</p><p>假设$\vec{r} = (x, y, z)$，那么我们有</p><p>$\vec{r}×\vec{v} = \begin{bmatrix}0 &amp; -z &amp; y \\ z &amp; 0 &amp; -x \\ -y &amp; x &amp; 0\end{bmatrix} \cdot \vec{v}$</p><p>再来看$(\vec{v} \cdot \vec{r}) \cdot \vec{r}$，同样，我们尝试把$(\vec{v} \cdot \vec{r}) \cdot \vec{r}$表现为$M \cdot \vec{v}$的形式：</p><p>假设$\vec{a} = (x_1, y_1, z_1), \vec{b} = (x_2, y_2, z_2)$</p><p>$(\vec{a} \cdot \vec{b}) \cdot \vec{a} = M \cdot {\vec{b}}$，求$M$</p><p>$\vec{a} \cdot \vec{b} = x_1x_2 + y_1y_2 + z_1z_2$</p><p>$(\vec{a} \cdot \vec{b}) \cdot \vec{a} = (x_1x_2 + y_1y_2 + z_1z_2) \cdot \vec{a} \ =  (x_1x_2 + y_1y_2 + z_1z_2) \cdot \begin{bmatrix}x_1 \\ y_1 \\ z_1\end{bmatrix} \\ = \begin{bmatrix}x_1^2x_2 +  x_1y_1y_2 + x_1z_1z_2 \\ x_1x_2y_1 + y_1^2y_2 + y_1z_1z_2 \\ x_1x_2z_1 + y_1y_2z_1 + z_1^2z_2\end{bmatrix} \\ = M \cdot \begin{bmatrix}x_2 \\ y_2 \\ z_2\end{bmatrix} $</p><p>$M = \begin{bmatrix} x_1^2 &amp; x_1y_1 &amp; x_1z_1 \\ x_1y_1 &amp; y_1^2 &amp; y_1z_1 \\ x_1z_1 &amp; y_1z_1 &amp; z_1^2 \end{bmatrix}$</p><p>套到$(\vec{r} \cdot \vec{v}) \cdot \vec{r}$上，就是</p><p>$(\vec{v} \cdot \vec{r}) \cdot \vec{r} = (\vec{r} \cdot \vec{v}) \vec{r} \\ = \begin{bmatrix}x^2 &amp; xy &amp; xz \\ xy&amp; y^2 &amp; yz \\ xz &amp; yz &amp; z^2\end{bmatrix} \cdot \vec{v}$</p><p>将这些结果代入_式7_，我们可以得出</p><p>$T(\vec{v}) = (1 - cosθ)\begin{bmatrix}x^2 &amp; xy &amp; xz \\ xy &amp; y^2 &amp; yz \\ xz &amp; yz &amp; z^2\end{bmatrix} \vec{v} + cosθ\vec{v} + \begin{bmatrix}0 &amp; -z &amp; y \\ z &amp; 0 &amp; -x \\ -y &amp; x &amp; 0\end{bmatrix}sinθ\vec{v}$</p><p>这里已经很接近我们的最终答案了，但是有点小问题，我们怎么把中间的cosθ融合到矩阵中？这时候就要用到单位矩阵，单位矩阵的性质非常简单粗暴，就是任何左乘单位矩阵的向量，结果都等于向量本身。也就是说，假设单位矩阵为$I$，向量为$\vec{v}$，我们有$I \cdot \vec{v} = \vec{v}$。</p><p>我们借助单位矩阵把式子变换一下：</p><p>$T(\vec{v}) = (1 - cosθ)\begin{bmatrix}x^2 &amp; xy &amp; xz \\ xy &amp; y^2 &amp; yz \\ xz &amp; yz &amp; z^2\end{bmatrix} \vec{v} + cosθ\vec{v} + \begin{bmatrix}0 &amp; -z &amp; y \\ z &amp; 0 &amp; -x \\ -y &amp; x &amp; 0\end{bmatrix}sinθ\vec{v} \\ = (1 - cosθ)\begin{bmatrix}x^2 &amp; xy &amp; xz \\ xy &amp; y^2 &amp; yz \\ xz &amp; yz &amp; z^2\end{bmatrix} \vec{v} + \begin{bmatrix}1 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1\end{bmatrix}cosθ\vec{v} + \begin{bmatrix}0 &amp; -z &amp; y \\ z &amp; 0 &amp; -x \\ -y &amp; x &amp; 0\end{bmatrix}sinθ\vec{v} \\ = \begin{bmatrix}x^2(1-cosθ) + cosθ &amp; xy(1-cosθ)-zsinθ &amp; xz(1-cosθ) + ysinθ \\ xy(1-cosθ) + zsinθ &amp; y^2(1-cosθ) + cosθ &amp; yz(1-cosθ)-xsinθ\\ zx(1-cosθ)-ysinθ &amp; yz(1-cosθ)+xsinθ &amp; z^2(1-cosθ)+cos\end{bmatrix} \vec{v}$</p><p>我们成功地把$T(\vec{v})$转换为$T(\vec{v}) = M \cdot \vec{v}$的形式。由于我们用的是齐次坐标，所以最后要把矩阵$M$升一维，也就是我们一开始看到的结论：</p><p>$M = \begin{bmatrix}x^2(1-cosθ) + cosθ &amp; xy(1-cosθ)-zsinθ &amp; xz(1-cosθ) + ysinθ &amp; 0 \\ xy(1-cosθ) + zsinθ &amp; y^2(1-cosθ) + cosθ &amp; yz(1-cosθ)-xsinθ &amp; 0 \\ zx(1-cosθ)-ysinθ &amp; yz(1-cosθ)+xsinθ &amp; z^2(1-cosθ)+cosθ &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix}$</p><h4 id="3-3-OpenGL-ES计算旋转矩阵"><a href="#3-3-OpenGL-ES计算旋转矩阵" class="headerlink" title="3.3 OpenGL ES计算旋转矩阵"></a>3.3 OpenGL ES计算旋转矩阵</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 围绕z轴旋转30度</span></span><br><span class="line">Matrix.setRotateM(m: matrix, offset: <span class="number">0</span>, angle: <span class="number">30f</span>, x: <span class="number">0f</span>, y: <span class="number">0f</span>, z: <span class="number">1f</span>);</span><br><span class="line"><span class="comment">// 围绕向量(1, 3, 5)旋转45度</span></span><br><span class="line">Matrix.setRotateM(m: matrix, offset: <span class="number">0</span>, angle: <span class="number">45f</span>, x: <span class="number">1f</span>, y: <span class="number">3f</span>, z: <span class="number">5f</span>);</span><br></pre></td></tr></table></figure><p>实现比较长，这里就不贴出来了，算出来的矩阵同样跟我们推导的矩阵是互为转置关系。</p><h2 id="四、透视投影"><a href="#四、透视投影" class="headerlink" title="四、透视投影"></a>四、透视投影</h2><p>因为透视投影是一种非线性变换，所以单独开一个章节来写。</p><h3 id="1-什么是透视投影"><a href="#1-什么是透视投影" class="headerlink" title="1. 什么是透视投影"></a>1. 什么是透视投影</h3><p>透视投影是渲染管线(Rendering Pipeline)的重要组成部分，是将相机空间(Camera Space)中的点从视锥体(Frustum)变换到规则观察体(Canonical View Volume)中，待裁剪完毕后进行透视除法的行为。</p><p>从几何层面来说，透视投影就是把欧几里德空间里的点映射到一个新的空间的手段。</p><h3 id="2-为什么要透视投影"><a href="#2-为什么要透视投影" class="headerlink" title="2. 为什么要透视投影"></a>2. 为什么要透视投影</h3><p>为什么我们需要透视投影？我们可以反过来想这个问题：为什么不用欧几里德三维空间？欧几里德三维空间里每个点都可以找到它们的坐标，而且非常直观，小孩子都能直接利用坐标来作图，为什么不用呢？</p><p>原因很简单，欧几里德是一个“理想化”的空间，在这个空间里，平行的线是永远不会相交的，这违背了人类视觉的观感（见下图）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/railway.jpg" alt="Railway" title="">                </div>                <div class="image-caption">Railway</div>            </figure><h3 id="3-透视投影数学原理"><a href="#3-透视投影数学原理" class="headerlink" title="3. 透视投影数学原理"></a>3. 透视投影数学原理</h3><h4 id="3-1-映射的概念"><a href="#3-1-映射的概念" class="headerlink" title="3.1 映射的概念"></a>3.1 映射的概念</h4><p>透视投影在数学层面上，就是坐标点的映射，映射的基本思想很简单：</p><p>给定$x\in[a, b]$，找$y\in[c, d]$，使得$\frac{x-a}{b-a} = \frac{y-c}{d-c}$</p><p>若$x\notin[a, b]$，则$y\notin[c, d]$。</p><h4 id="3-2-透视投影步骤"><a href="#3-2-透视投影步骤" class="headerlink" title="3.2 透视投影步骤"></a>3.2 透视投影步骤</h4><ul><li>用透视变换矩阵把顶点从视锥体中变换到Clip Space中</li><li>规则观察体CVV(Canonical View Volume)裁剪后进行透视除法（后边会解释）</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/perspective_projection_view_frustum.png" alt="PerspectiveProjectionViewFrustum" title="">                </div>                <div class="image-caption">PerspectiveProjectionViewFrustum</div>            </figure><h4 id="3-3-求透视变换矩阵"><a href="#3-3-求透视变换矩阵" class="headerlink" title="3.3 求透视变换矩阵"></a>3.3 求透视变换矩阵</h4><p>又到了令人紧张又兴奋的求解部分了，我们慢慢来，先观察X-Z平面：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/perspective_projection_xz.png" alt="PerspectiveProjectionXZ" title="">                </div>                <div class="image-caption">PerspectiveProjectionXZ</div>            </figure><p>根据相似三角形的性质，我们可以得出</p><p>$\frac{x}{x’} = \frac{z}{z’} = \frac{x}{-N}$</p><p>$x’ = -N \cdot \frac{x}{z}$</p><p>同理，$y’ = -N \cdot \frac{y}{z}$</p><p>对于任意一点$P = (x, y, z)$我们都可以找到透视投影后的点$P’ = (-N \cdot \frac{x}{z}, -N \cdot \frac{y}{z}, -N)$</p><p>投影结果中，$z’$始终等于-N，但是在渲染管线中，后续会对Fragment有操作，如执行Z缓冲消隐算法，我们有必要z值保留下来，所以$P’ = (-N \cdot \frac{x}{z}, -N \cdot \frac{y}{z}, z)$</p><p>为了让程序易于处理，我们如果把$P’$写成如下形式</p><p>$P’ = (-N \cdot \frac{x}{z}, -N \cdot \frac{y}{z}, -\frac{az + b}{z})$</p><p>我们把$P’$转成齐次坐标的形式：</p><p>$P’ =  (-N \cdot \frac{x}{z}, -N \cdot \frac{y}{z}, -\frac{az + b}{z}, 1) $</p><p>再把所有分量乘以$-z$，得到</p><p>$P’ =  (Nx, Ny, az + b, z)$</p><p>这样我们就可以用下面的矩阵来表示这种变换：</p><p>$\begin{bmatrix}N &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; N &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; a &amp; b \\ 0 &amp; 0 &amp; -1 &amp; 0\end{bmatrix} \cdot \begin{bmatrix}x \\ y \\ z \\ 1\end{bmatrix} = \begin{bmatrix}Nx \\ Ny \\ az+b \\ -z\end{bmatrix}$</p><p>再把$\begin{bmatrix}Nx \\ Ny \\ az+b \\ -z\end{bmatrix}$所有分量都除以$-z$</p><p>得到$\begin{bmatrix}-N\frac{x}{z} \\ -N\frac{y}{z} \\ -\frac{az+b}{z} \\ 1\end{bmatrix}$</p><p>这个过程就叫透视除法，会损失一些必要的信息，如原始的$z$值</p><p>为什么要把$z$写成$-\frac{az+b}{z}$？有两点原因：</p><ul><li>$P’$的3个分量统一除以$-z$，易于使用齐次坐标变换普通坐标的方式，后续使用相对统一和高效。</li><li>CVV是一个x, y, z范围都是[-1, 1]的立方体，便于多边形的裁剪。我们可以选择适当的a和b使得$-\frac{az+b}{z}$在$z = -N$时的值等于-1，在$Z = -F$时的值等于1。</li></ul><p>联立两个式子</p><p>$-\frac{az+b}{z} = -1$, when $z = -N$</p><p>$-\frac{az+b}{z} = 1$, when $z = -$F</p><p>可得</p><p>$a = - \frac{F + N}{F - N}$</p><p>$b = - \frac{2FN}{F - N}$</p><p>这样，我们就得到了我们的第一版透视变换矩阵:</p><p>$\begin{bmatrix}N &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; N &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; -\frac{F+N}{F-N} &amp; -\frac{2FN}{F-N} \\ 0 &amp; 0 &amp; -1 &amp; 0\end{bmatrix}$</p><p>用第一版投影矩阵可以在z上构建CVV，但是(x, y)都还没限制在[1-, 1]。我们知道$-N \frac{x}{z}$的有效范围是投影屏幕的左边界值（left）和右边界值(right)，即$-N \frac{x}{z} \in [left, right]$；同理，$-N \frac{y}{z} \in [bottom, top]$。</p><p>我们想把$-N \frac{x}{z} \in [left, right]$和$-N \frac{y}{z} \in [bottom, top]$映射到[-1, 1]中，即</p><p>$\frac{-N\frac{x}{z}-left}{right - left} = \frac{x - (-1)}{1 - (-1)}$</p><p>$\frac{-N\frac{y}{z}-bottom}{bottom - top} = \frac{y - (-1)}{1 - (-1)}$</p><p>整理一下求x, y的表达式</p><p>$x = \frac{2Nx/(-z)}{right - left} - \frac{right+left}{right-left}$</p><p>$y = \frac{2Ny/(-z)}{top - bottom} - \frac{top+bottom}{top-bottom}$</p><p>代入点$P’$，可得</p><p>$P’ = \begin{bmatrix}\frac{2Nx/(-z)}{right-left} - \frac{right+left}{right-left} \\ \frac{2Ny/(-z)}{top-bottom} - \frac{top+bottom}{top-bottom} \\ -\frac{az+b}{z} \\ 1\end{bmatrix} \\ = \begin{bmatrix}\frac{2Nx}{right-left} + \frac{right+left}{right-left}z \\ \frac{2Ny}{top-bottom} + \frac{top+bottom}{top-bottom}z \\ az+b \\ -z\end{bmatrix}$</p><p>老规矩，我们尝试用$M \cdot P = P’$的形式来求变换矩阵</p><p>$M \cdot \begin{bmatrix}x \\ y \\ z \\ 1\end{bmatrix} = \begin{bmatrix}\frac{2Nx}{right-left} + \frac{right+left}{right-left}z \\ \frac{2Ny}{top-bottom} + \frac{top+bottom}{top-bottom}z \\ az+b \\ -z\end{bmatrix}$</p><p>一波骚操作，我们得到</p><p>$\begin{array}{c} M = \begin{bmatrix}\frac{2N}{right - left} &amp; 0 &amp; \frac{right+left}{right-left} &amp; 0 \\ 0 &amp; \frac{2N}{top-bottom} &amp; \frac{top+bottom}{top-bottom} &amp; 0 \\ 0 &amp; 0 &amp; a &amp; b \\ 0 &amp; 0 &amp; -1 &amp; 0\end{bmatrix} \\ a = -\frac{F+N}{F-N} \\ b = -\frac{2FN}{F - N} \end{array}$</p><p>这个矩阵$M$就是我们想要的透视变换矩阵。</p><p>最后我们收一下尾，算一下$left$, $right$, $top$和$bottom$的值。</p><p>我们可以在$X$-$Z$平面计算视锥体</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/perspective_projection_xz_frustum.jpg" alt="PerspectiveProjectionXZFrustum" title="">                </div>                <div class="image-caption">PerspectiveProjectionXZFrustum</div>            </figure><p>也可以在$Y$-$Z$平面计算视锥体</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/perspective_projection_yz_frustum.jpg" alt="PerspectiveProjectionYZFrustum" title="">                </div>                <div class="image-caption">PerspectiveProjectionYZFrustum</div>            </figure><p>一般建议用$Y$-$Z$平面来计算，因为少一个除法，计算效率会高一点。</p><p>至此，透视变换矩阵计算完毕。</p><h3 id="4-OpenGL-ES计算透视投影矩阵"><a href="#4-OpenGL-ES计算透视投影矩阵" class="headerlink" title="4. OpenGL ES计算透视投影矩阵"></a>4. OpenGL ES计算透视投影矩阵</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算透视矩阵，在y方向上的field of view角度为45度，aspect是宽高比，近平面距离0.1f，远平面距离100f</span></span><br><span class="line">Matrix.perspectiveM(m: matrix, offset: <span class="number">0</span>, fovy: <span class="number">45f</span>, aspect: width/(<span class="keyword">float</span>) height, zNear: <span class="number">0.1f</span>, zFar: <span class="number">100f</span>);</span><br></pre></td></tr></table></figure><p>可以看出，OpenGL ES是在y方向上计算的，我们先看实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">perspectiveM</span><span class="params">(<span class="keyword">float</span>[] m, <span class="keyword">int</span> offset, <span class="keyword">float</span> fovy, <span class="keyword">float</span> aspect, <span class="keyword">float</span> zNear, <span class="keyword">float</span> zFar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">1.0f</span> / (<span class="keyword">float</span>) Math.tan(fovy * (Math.PI / <span class="number">360.0</span>));</span><br><span class="line">        <span class="keyword">float</span> rangeReciprocal = <span class="number">1.0f</span> / (zNear - zFar);</span><br><span class="line"></span><br><span class="line">        m[offset + <span class="number">0</span>] = f / aspect;</span><br><span class="line">        m[offset + <span class="number">1</span>] = <span class="number">0.0f</span>;</span><br><span class="line">        m[offset + <span class="number">2</span>] = <span class="number">0.0f</span>;</span><br><span class="line">        m[offset + <span class="number">3</span>] = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">        m[offset + <span class="number">4</span>] = <span class="number">0.0f</span>;</span><br><span class="line">        m[offset + <span class="number">5</span>] = f;</span><br><span class="line">        m[offset + <span class="number">6</span>] = <span class="number">0.0f</span>;</span><br><span class="line">        m[offset + <span class="number">7</span>] = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">        m[offset + <span class="number">8</span>] = <span class="number">0.0f</span>;</span><br><span class="line">        m[offset + <span class="number">9</span>] = <span class="number">0.0f</span>;</span><br><span class="line">        m[offset + <span class="number">10</span>] = (zFar + zNear) * rangeReciprocal;</span><br><span class="line">        m[offset + <span class="number">11</span>] = -<span class="number">1.0f</span>;</span><br><span class="line"></span><br><span class="line">        m[offset + <span class="number">12</span>] = <span class="number">0.0f</span>;</span><br><span class="line">        m[offset + <span class="number">13</span>] = <span class="number">0.0f</span>;</span><br><span class="line">        m[offset + <span class="number">14</span>] = <span class="number">2.0f</span> * zFar * zNear * rangeReciprocal;</span><br><span class="line">        m[offset + <span class="number">15</span>] = <span class="number">0.0f</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>先按代码把矩阵写出来：</p><p>$\begin{bmatrix}\frac{f}{aspect} &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; f &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; \frac{N+F}{N-F} &amp; -1 \\ 0 &amp; 0 &amp; \frac{2FN}{N-F} &amp; 0\end{bmatrix}$</p><p>$f = 1/tan\frac{fovy}{2} \\ N = zNear \\ F = zFar $</p><p>我们把矩阵转置一下：</p><p>$\begin{bmatrix}\frac{f}{aspect} &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; f &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; \frac{N+F}{N-F} &amp; -1 \\ 0 &amp; 0 &amp; \frac{2FN}{N-F} &amp; 0\end{bmatrix}^T =\begin{bmatrix}\frac{f}{aspect} &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; f &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; \frac{N+F}{N-F} &amp; \frac{2FN}{N-F} \\ 0 &amp; 0 &amp; -1 &amp; 0\end{bmatrix} $</p><p>看起来好像跟我们推导的</p><p>$M = \begin{bmatrix}\frac{2N}{right - left} &amp; 0 &amp; \frac{right+left}{right-left} &amp; 0 \\ 0 &amp; \frac{2N}{top-bottom} &amp; \frac{top+bottom}{top-bottom} &amp; 0 \\ 0 &amp; 0 &amp; -\frac{N+F}{F-N} &amp; \frac{-2FN}{F-N} \\ 0 &amp; 0 &amp; -1 &amp; 0\end{bmatrix}$</p><p>不太一样，可能这里有同学会质问刘老师：“怎么回事？”，但是没关系，刘老师稳得一匹，让刘老师来装完这最后一个B。</p><p>OpenGL给出的透视矩阵跟我们推导的矩阵只在前两行上看上去有区别，我们可以先看$\frac{right+left}{right-left}$和$ \frac{top+bottom}{top-bottom}$，由于视锥体是关于Z轴对称的，其实$right+left$和$top+bottom$的值都是0，这里我们就消掉了两个冗余项；</p><p>我们再来看$\frac{2N}{top-bottom}$，同理，这个表达式可以写成$\frac{2N}{2top} = \frac{N}{top} = 1/tan\frac{fovy}{2} = f$。</p><p>最后，看$\frac{2N}{right-left} = \frac{N}{right} = \frac{N}{top \cdot aspect} = \frac{f}{aspect}$，至此，证明完毕。</p><h2 id="五、后语"><a href="#五、后语" class="headerlink" title="五、后语"></a>五、后语</h2><p>此处应有掌声。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-4-线代基础与矩阵变换原理&quot;&gt;&lt;a href=&quot;#1-4-线代基础与矩阵变换原理&quot; class=&quot;headerlink&quot; title=&quot;1.4 线代基础与矩阵变换原理&quot;&gt;&lt;/a&gt;1.4 线代基础与矩阵变换原理&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="OpenGL ES" scheme="https://tchaikovdriver.github.io/categories/OpenGL-ES/"/>
    
    
      <category term="OpenGL ES" scheme="https://tchaikovdriver.github.io/tags/OpenGL-ES/"/>
    
  </entry>
  
  <entry>
    <title>1.3 OpenGL绘制矩形</title>
    <link href="https://tchaikovdriver.github.io/2018/09/16/1-3-OpenGL%E7%BB%98%E5%88%B6%E7%9F%A9%E5%BD%A2/"/>
    <id>https://tchaikovdriver.github.io/2018/09/16/1-3-OpenGL绘制矩形/</id>
    <published>2018-09-16T12:27:58.000Z</published>
    <updated>2018-09-16T13:41:49.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-3-绘制矩形"><a href="#1-3-绘制矩形" class="headerlink" title="1.3 绘制矩形"></a>1.3 绘制矩形</h1><p>[TOC]</p><h2 id="一、前请提要"><a href="#一、前请提要" class="headerlink" title="一、前请提要"></a>一、前请提要</h2><p>在《1.2 绘制三角形》里，我们学习了如何绘制三角形，也知道了在OpenGL ES里面，可绘制的基本图元只有点、线和三角形。那么，这是否意味着我们不能画三角形以外的图形了呢？相信大家看到这里肯定会骂我傻子都知道肯定不可能只能画三角形。<br>本文将会围绕“如何绘制矩形”来讲述绘制矩形的几种方式。</p><p>P.S: <code>GLSurfaceView</code>的配置请看《1.2 绘制三角形》，本文主要讲<code>Renderer</code>里用到的<code>DrawProgram</code>接口的实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleRenderer</span> <span class="keyword">implements</span> <span class="title">GLSurfaceView</span>.<span class="title">Renderer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 承载绘制逻辑的Program</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DrawProgram mProgram;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleRenderer</span><span class="params">(DrawProgram program)</span> </span>&#123;</span><br><span class="line">        mProgram = program;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceCreated</span><span class="params">(GL10 gl, EGLConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 指定了清空画布颜色时使用的颜色：黑色</span></span><br><span class="line">        GLES20.glClearColor(<span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>);</span><br><span class="line">        <span class="comment">// 创建绘制程序</span></span><br><span class="line">        mProgram.createProgram(gl, config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceChanged</span><span class="params">(GL10 gl, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 以像素为单位，指定了视口的左下角（在第一象限内，以（0，0）为原点的）位置。width，height————表示这个视口矩形的宽度和高度，根据窗口的实时变化重绘窗口</span></span><br><span class="line">        GLES20.glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        mProgram.onSizeChanged(gl, width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawFrame</span><span class="params">(GL10 gl)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 清空颜色缓冲区，也就是用黑色来填充画布</span></span><br><span class="line">        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);</span><br><span class="line">        <span class="comment">// 执行绘制逻辑</span></span><br><span class="line">        mProgram.draw(gl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OpenGL绘制程序接口</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Created by LiuYujie on 2018/1/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DrawProgram</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建GL程序，这两个参数其实我也不知道有啥用，以后再研究吧</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gl     GL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config EGLConfig</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createProgram</span><span class="params">(GL10 gl, EGLConfig config)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Surface尺寸变化时触发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gl     GL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width  新Surface宽度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height 新Surface高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(GL10 gl, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行绘制操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gl GL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(GL10 gl)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>P.S中的P.S：本文的涉及的代码可以在[这里]<a href="https://github.com/TchaikovDriver/OpenGLDemo)获取。" target="_blank" rel="noopener">https://github.com/TchaikovDriver/OpenGLDemo)获取。</a></p><h2 id="二、绘制思路"><a href="#二、绘制思路" class="headerlink" title="二、绘制思路"></a>二、绘制思路</h2><p>相信不用我说，大家用膝盖都能想到，在只能画点、线、三角形的前提下， 绘制一个矩形，只需要用两个全等直角三角形拼起来就可以了，实际上也确实如此。</p><p>那为什么要特意写一篇文章来说这一点？其实是想借着绘制矩形来介绍OpenGL里的几种<code>Vertex</code>组合图形的方式。</p><h3 id="1-glDrawArrays方法"><a href="#1-glDrawArrays方法" class="headerlink" title="1. glDrawArrays方法"></a>1. glDrawArrays方法</h3><p>在《OpenGL入门——三角形的绘制》里，我们在准备好<code>Vertex Shader</code>和<code>Fragment Shader</code>、传递<code>Vertex</code>的<code>FloatBuffer</code>给GL程序之后，我们调用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>来绘制三角形。调用<code>GLES20.glDrawArrays</code>方法之后，GLSL程序会遍历所有enable的数组，按顺序构造出指定的基本图元（这里是三角形<code>GLES20.GL_TRIANGLES</code>）并绘制出来。</p><h3 id="2-简单粗暴地绘制"><a href="#2-简单粗暴地绘制" class="headerlink" title="2. 简单粗暴地绘制"></a>2. 简单粗暴地绘制</h3><p>用这种方式绘制矩形的话，我们需要6个点，每个三角形3个点，可以在<code>DrawTriangleProgram</code>的基础上修改<code>VERTEX</code>数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span>[] VERTEX = &#123;</span><br><span class="line">  <span class="comment">// 第一个三角形</span></span><br><span class="line">            -.<span class="number">5f</span>, -.<span class="number">5f</span>, <span class="number">0f</span>,<span class="comment">// bottom left</span></span><br><span class="line">            -.<span class="number">5f</span>, .<span class="number">5f</span>, <span class="number">0f</span>,<span class="comment">// top left</span></span><br><span class="line">            .<span class="number">5f</span>, .<span class="number">5f</span>, <span class="number">0f</span>,<span class="comment">// top right</span></span><br><span class="line">  <span class="comment">// 第二个三角形</span></span><br><span class="line">  -.<span class="number">5f</span>, -.<span class="number">5f</span>, <span class="number">0f</span>,<span class="comment">// bottom left</span></span><br><span class="line">  .<span class="number">5f</span>, .<span class="number">5f</span>, <span class="number">0f</span>,<span class="comment">// top right</span></span><br><span class="line">            .<span class="number">5f</span>, -.<span class="number">5f</span>, <span class="number">0f</span> <span class="comment">// bottom right</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>接着是修改<code>draw(GL10 gl)</code>的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(GL10 gl)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 绘制两个三角形</span></span><br><span class="line">    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class="number">0</span>, <span class="number">6</span>); <span class="comment">// 6个点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，GL程序就会遍历<code>mVertexBuffer</code>里的6个点（示意图如下），前三个点ABC绘制为一个三角形，后三个点ADC绘制为另一个三角形，在视觉上这两个三角形合并为一个矩形，这样我们的矩形就绘制完毕了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/OpenGL_DrawRectangle_Points.png" alt="构成矩形的两个三角形" title="">                </div>                <div class="image-caption">构成矩形的两个三角形</div>            </figure><h3 id="3-开源节流——GL-TRIANGLE-STRIP"><a href="#3-开源节流——GL-TRIANGLE-STRIP" class="headerlink" title="3. 开源节流——GL_TRIANGLE_STRIP"></a>3. 开源节流——GL_TRIANGLE_STRIP</h3><p>在上一个简单粗暴的绘制方式里，崇尚节约的同学可能会想，一个矩形只需要4个点，上面这种方式其实有两个点是重复的，有没有办法可以复用中间两个点，减少<code>VERTEX</code>数组的长度？</p><p>答案是肯定的，不然我就扯不了那么久了。</p><p>我们可以看<code>GLES20.glDrawArrays(int mode, int first, int count)</code>方法签名，第一个参数<code>mode</code>指代的是绘制模式，绘制三角形的模式，只要好奇心足够，我们会发现绘制三角形一共有三种模式：</p><p><code>GLES20.GL_TRIANGLES</code>，<code>GLES20.GL_TRIANGLE_STRIP</code>和<code>GLES20.GL_TRIANGLE_FAN</code>。</p><p>第一种模式<code>GLES20.GL_TRIANGLES</code>是遍历顶点数组，以3个为一组，3个点组合为一个三角形，依次绘制，假设传入的顶点数为n，则绘制的三角形数量是n/3。</p><p>第二种模式<code>GLES20.GL_TRIANGLE_STRIP</code>是遍历顶点数组，以<strong>相邻的3个点</strong>为组合，依次绘制，假设传入的定点数为n，则绘制的三角形数量是n-2（n &gt;= 3）。</p><p>第三种模式<code>GLES20.GL_TRIANGLE_FAN</code>是遍历顶点数组，以<strong>首个顶点</strong>为所有要绘制的三角形的其中一个点，剩下的顶点按顺序，以2个点为单位，每个单位分别与第一个顶点组合成一个三角形。</p><p>在这小节里，我们用<code>GLES20.GL_TRIANGLE_STRIP</code>来绘制矩形。</p><p>首先，我们要确定顶点顺序，这一点很关键，OpenGL绘制图形是按顶点顺序来组合图形的，错误的顶点顺序组合而成的图形可能会跟我们想要的结果有出入。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/OpenGL_DrawRectangle_Points.png" alt="构成矩形的两个三角形" title="">                </div>                <div class="image-caption">构成矩形的两个三角形</div>            </figure><p>还是这张图，可以看出，在上一小节中我们重复声明的两个点是点A和点C，所以<code>VERTEX</code>数组应该这样修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span>[] VERTEX = &#123;</span><br><span class="line">            -.<span class="number">5f</span>, .<span class="number">5f</span>, <span class="number">0</span>, <span class="comment">// top left B</span></span><br><span class="line">            .<span class="number">5f</span>, .<span class="number">5f</span>, <span class="number">0</span>, <span class="comment">// top right C</span></span><br><span class="line">  -.<span class="number">5f</span>, -.<span class="number">5f</span>, <span class="number">0</span>,<span class="comment">// bottom left A</span></span><br><span class="line">            .<span class="number">5f</span>, -.<span class="number">5f</span>, <span class="number">0</span> <span class="comment">// bottom right D</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>根据注释内容可以看出，B，C，A三个点组成矩形上半部分，C，A，D三个点组成矩形的下半部分，最后，我们修改一下绘制代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(GL10 gl)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 绘制两个三角形</span></span><br><span class="line">    GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, <span class="number">0</span>, <span class="number">4</span>); <span class="comment">// 4个点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就实现了用4个点来绘制矩形。</p><h3 id="4-随心所欲地画——glDrawElements"><a href="#4-随心所欲地画——glDrawElements" class="headerlink" title="4. 随心所欲地画——glDrawElements"></a>4. 随心所欲地画——glDrawElements</h3><p>在上面小节里，我们用<code>GLES20.GL_TRIANGLE_STRIP</code>的模式绘制了矩形，这个模式要求我们的<code>VERTEX</code>数组严格按照一定顺序来保存顶点坐标。设想一下，如果我们以后要绘制多个矩形，甚至是更复杂的图形，而这些图形中又有非常多共用的点，这种情况下怎么办？</p><p>用<code>GLES20.GL_TRIANGLES</code>模式绘制会创建很多重复的点；用<code>GLES20.GL_TRIANGLE_STRIP</code>的话，视绘制的图形的复杂程度，我们未必能排列出一个恰好覆盖到所有图形的顶点顺序。</p><p>设计OpenGL的大佬们当然早就预料到这种case，并给出了解决方案，这个解决方案就是使用<code>GLES20.glDrawElements(int mode,  int count, int type, Buffer indices)</code>方法来绘制图形。</p><p>这个方法对比<code>GLES20.glDrawArrays(int mode, int first, int count)</code>，可以说是换了个思路来组合顶点，后者是按线性顺序以及绘制模式来决定组合图形的顶点，而前者则是通过显式声明的顶点顺序来组合图形，接下来会用代码来详细讲解。</p><p>首先，我们还是定义好<code>VERTEX</code>数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span>[] VERTEX = &#123;</span><br><span class="line">  -.<span class="number">5f</span>, -.<span class="number">5f</span>, <span class="number">0</span>,<span class="comment">// bottom left A</span></span><br><span class="line">            -.<span class="number">5f</span>, .<span class="number">5f</span>, <span class="number">0</span>, <span class="comment">// top left B</span></span><br><span class="line">            .<span class="number">5f</span>, .<span class="number">5f</span>, <span class="number">0</span>, <span class="comment">// top right C</span></span><br><span class="line">            .<span class="number">5f</span>, -.<span class="number">5f</span>, <span class="number">0</span> <span class="comment">// bottom right D</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看出，我们的顶点不能按<code>GLES20.GL_TRIANGLES_STRIP</code>的方式来绘制，因为复用的AC两点不在数组的中间。但是，我们知道，绘制这个矩形需要A，B，C和A，C，D来分别组成两个三角形。因此，我们确立了顶点的组合方式分别是第0，1，2和0，2，3个顶点，所以就有了下面的<code>DRAW_INDEX</code>数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">short</span>[] DRAW_INDEX = &#123;</span><br><span class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="comment">// 第一个三角形，用到左下，左上和右上三个点</span></span><br><span class="line">            <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span> <span class="comment">// 第二个点，用到左下，右上和右下三个点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为<code>GLES20.glDrawElements</code>方法接受的index数据结构是Buffer，所以我们要创建一个<code>ShortBuffer</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ShortBuffer indices = ByteBuffer.allocateDirect(DRAW_INDEX.length * SIZEOF_SHORT)</span><br><span class="line">                .order(ByteOrder.nativeOrder())</span><br><span class="line">                .asShortBuffer()</span><br><span class="line">                .put(DRAW_INDEX);</span><br><span class="line">indices.position(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>最后，实现绘制方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(GL10 gl)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 声明index长度，数据类型为unsigned short，以及传入indexBuffer</span></span><br><span class="line">   GLES20.glDrawElements(GLES20.GL_TRIANGLES, DRAW_INDEX.length, GLES20.GL_UNSIGNED_SHORT,                indices);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，GL程序在绘制时就会按我们指定的顶点顺序，取第0，1，2个顶点画第一个三角形，取第0，2，3个顶点画第二个三角形，两个三角形组合成一个矩形。</p><p>在绘制复杂图形时，很多时候使用<code>GLES20.glDrawElements</code>方法可以<strong>节省不少顶点数组的空间</strong>，特别是每个顶点包含的信息越多的情况下（如顶点颜色）就更是如此。</p><h3 id="5-扩展——GL-TRIANGLE-FAN"><a href="#5-扩展——GL-TRIANGLE-FAN" class="headerlink" title="5. 扩展——GL_TRIANGLE_FAN"></a>5. 扩展——GL_TRIANGLE_FAN</h3><h4 id="5-1-矩形"><a href="#5-1-矩形" class="headerlink" title="5.1 矩形"></a>5.1 矩形</h4><p>前面我们有提到<code>GLES20.GL_TRIANGLE_FAN</code>绘制模式，这种模式是以<strong>首个顶点</strong>为所有要绘制的三角形的其中一个点，剩下的顶点按顺序，以2个点为单位，每个单位分别与第一个顶点组合成一个三角形。</p><p>下面会用这种方式来绘制矩形，需要注意的是，这种方式只会复用第一个顶点，而绘制一个矩形需要复用两个顶点，所以我们不可避免地需要多声明一个顶点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span>[] VERTEX = &#123;</span><br><span class="line">  -.<span class="number">5f</span>, -.<span class="number">5f</span>, <span class="number">0</span>,<span class="comment">// bottom left A</span></span><br><span class="line">            -.<span class="number">5f</span>, .<span class="number">5f</span>, <span class="number">0</span>, <span class="comment">// top left B</span></span><br><span class="line">            .<span class="number">5f</span>, .<span class="number">5f</span>, <span class="number">0</span>, <span class="comment">// top right C</span></span><br><span class="line">  .<span class="number">5f</span>, .<span class="number">5f</span>, <span class="number">0</span>, <span class="comment">// top right C</span></span><br><span class="line">            .<span class="number">5f</span>, -.<span class="number">5f</span>, <span class="number">0</span> <span class="comment">// bottom right D</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从上面代码可以看出，我们多声明了一个顶点C，所以我们的顶点序列是ABCCD，在<code>GLES20.GL_TRIANGLE_FAN</code>模式下，会把A拿出来，剩下的点BCCD按序分为两组，第一组是BC，第二组是CD，这两组分别与顶点A组合，从而得到三角形ABC和三角形ACD，这样就能画出我们想要的矩形了。</p><p>实现绘制代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLES20.glDrawArrays(GLES20.GL_TRIANGLE_FAN, <span class="number">0</span>, VERTEX.length / <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h4 id="5-2-拟合圆形"><a href="#5-2-拟合圆形" class="headerlink" title="5.2 拟合圆形"></a>5.2 拟合圆形</h4><p>看到这里，可能大家都厌倦了画矩形了，之前我们有提过可以用三角形来拟合复杂图形，现在刚好可以用<code>GLES20.GL_TRIANGLE_FAN</code>绘制模式来演示一下如何用三角形来拟合圆形。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/OpenGL_fitting_circle.jpg" alt="拟合圆形" title="">                </div>                <div class="image-caption">拟合圆形</div>            </figure><p>如上图所示，在一个圆里，以圆心为坐标原点建立直角坐标系，把圆形分割为若干等分的扇形，把圆心和扇形的射线与圆边的交点连接起来，就可以得到若干个扇形的内接三角形。当我们把圆形分割得足够多份的时候，我们用三角形拟合出来的图形就跟圆形越接近。</p><p>经过简单的数学证明（这里就不赘述了，要证明请找刘老师），我们可以用以下代码来生成顶点坐标：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span>[] VERTEX;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        List&lt;Float&gt; vertices = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 首个顶点为圆心，即坐标原点(0,0,0)</span></span><br><span class="line">        vertices.add(<span class="number">0f</span>);</span><br><span class="line">        vertices.add(<span class="number">0f</span>);</span><br><span class="line">        vertices.add(<span class="number">0f</span>);</span><br><span class="line">        <span class="comment">// 顶点坐标范围是[-1, 1]</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> radius = <span class="number">0.25f</span>;</span><br><span class="line">        <span class="comment">// 将圆切割为40等份</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> deltaDegree = <span class="number">360f</span> / <span class="number">20f</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> endDegree = deltaDegree + <span class="number">360f</span>;</span><br><span class="line">        <span class="keyword">double</span> radian;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">float</span> i = <span class="number">0</span>; i &lt; endDegree; i += deltaDegree) &#123;</span><br><span class="line">            radian = Math.toRadians(i);</span><br><span class="line">            vertices.add((<span class="keyword">float</span>)(radius * Math.sin(radian)));</span><br><span class="line">            vertices.add((<span class="keyword">float</span>)(radius * Math.cos(radian)));</span><br><span class="line">            vertices.add(<span class="number">0f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        VERTEX = <span class="keyword">new</span> <span class="keyword">float</span>[vertices.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = vertices.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            VERTEX[i] = vertices.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于视觉需要，我们会用到透视矩阵变换，这是超纲内容，会在下一期提到，现在大家暂且看看就好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERTEX_SHADER =</span><br><span class="line">                    <span class="string">"attribute vec4 aPosition;\n"</span> +</span><br><span class="line">                    <span class="string">"uniform mat4 uMVPMatrix;\n"</span> +</span><br><span class="line">                    <span class="string">"void main() &#123;\n"</span> +</span><br><span class="line">                    <span class="string">"gl_Position = uMVPMatrix * aPosition;\n"</span> +</span><br><span class="line">                    <span class="string">"&#125;"</span>;</span><br></pre></td></tr></table></figure><p>我们的<code>VERTEX_SHADER</code>新增了一个<code>uMVPMatrix</code>变量，而且会跟<code>aPosition</code>相乘后再赋值给<code>gl_Position</code>。这里其实就是对顶点坐标进行了一个矩阵变换。</p><p>接着我们要给矩阵赋值，使得这个变换有意义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取uMVPMatrix的句柄</span></span><br><span class="line"><span class="keyword">int</span> mMVPMatrixLoc = GLES20.glGetUniformLocation(programHandle, <span class="string">"uMVPMatrix"</span>);</span><br><span class="line"><span class="keyword">float</span>[] mMVPMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>]; <span class="comment">// MVPMatrix是4x4的矩阵</span></span><br><span class="line"><span class="comment">// 给透视矩阵赋值</span></span><br><span class="line">Matrix.perspectiveM(matrix: mMVPMatrix, offset: <span class="number">0</span>, fovy: <span class="number">45f</span>, aspect: width / (<span class="keyword">float</span>) height, zNear: <span class="number">0.1f</span>, zFar: <span class="number">100f</span>);</span><br><span class="line"><span class="comment">// 因为设置透视矩阵后Z轴会倒置，要把图形平移到Z轴 -100f~-0.1f的范围内才可以看到</span></span><br><span class="line">Matrix.translateM(matrix: mMVPMatrix, offset: <span class="number">0</span>, x: <span class="number">0</span>, y: <span class="number">0</span>, z: -<span class="number">3f</span>);</span><br></pre></td></tr></table></figure><p>最后的绘制逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(GL10 gl)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 把计算好的矩阵传给Vertex Shader中的uMVPMatrix变量</span></span><br><span class="line">    GLES20.glUniformMatrix4fv(mMVPMatrixLoc, <span class="number">1</span>, <span class="keyword">false</span>, mMVPMatrix, <span class="number">0</span>);</span><br><span class="line">    GLES20.glDrawArrays(GLES20.GL_TRIANGLE_FAN, <span class="number">0</span>, VERTEX.length / <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果预览：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/OpenGL_fitting_circle_example.png" alt="拟合圆形预览" title="">                </div>                <div class="image-caption">拟合圆形预览</div>            </figure><p>是不是很黄？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-3-绘制矩形&quot;&gt;&lt;a href=&quot;#1-3-绘制矩形&quot; class=&quot;headerlink&quot; title=&quot;1.3 绘制矩形&quot;&gt;&lt;/a&gt;1.3 绘制矩形&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、前请提要&quot;&gt;&lt;a href=&quot;#一、前请提要&quot; cl
      
    
    </summary>
    
      <category term="OpenGL ES" scheme="https://tchaikovdriver.github.io/categories/OpenGL-ES/"/>
    
    
      <category term="OpenGL ES" scheme="https://tchaikovdriver.github.io/tags/OpenGL-ES/"/>
    
  </entry>
  
  <entry>
    <title>1.2 OpenGL绘制三角形</title>
    <link href="https://tchaikovdriver.github.io/2018/09/16/1-2-OpenGL%E7%BB%98%E5%88%B6%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
    <id>https://tchaikovdriver.github.io/2018/09/16/1-2-OpenGL绘制三角形/</id>
    <published>2018-09-16T11:46:50.000Z</published>
    <updated>2018-09-16T13:41:41.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-2-绘制三角形"><a href="#1-2-绘制三角形" class="headerlink" title="1.2 绘制三角形"></a>1.2 绘制三角形</h1><p>[TOC]</p><h2 id="一、扯淡"><a href="#一、扯淡" class="headerlink" title="一、扯淡"></a>一、扯淡</h2><p>本文会结合代码来讲述如何绘制三角形，也会尽可能地覆盖疑点，当然一些超纲内容刘老师还没学会，来日方长，日后再说。</p><p>绘制一个图形一般需要准备以下东西：</p><ul><li>画布</li><li>画笔</li><li>绘制逻辑</li></ul><h2 id="二、画布"><a href="#二、画布" class="headerlink" title="二、画布"></a>二、画布</h2><p>在Android系统里使用OpenGL绘制，一般会用到<code>GLSurfaceView</code>或者<code>TextureView</code>，《OpenGL入门》系列如无意外都会采用<code>GLSurfaceView</code>作为教材。</p><p><code>GLSurfaceView</code>内部维护着GL线程，GL线程启动的时候会创建<code>EGLContext</code>以及<code>EGLSurface</code>，而<code>EGLSurface</code>就是我们需要的画布，虽然我们在绘制的时候并不会直接操作<code>EGLSurface</code>，但是没有这个我们什么都画不了。</p><p>使用<code>GLSurfaceView</code>只需要做简单的配置，配置代码如下：</p><p>###1. GLSurfaceView配置代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用OpenGL ES 2.0</span></span><br><span class="line">    mGLSurfaceView.setEGLContextClientVersion(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 配置RGBA和深度的size，因为用不上遮罩(mask)，所以stencilSize为0</span></span><br><span class="line">    mGLSurfaceView.setEGLConfigChooser(<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 配置画笔</span></span><br><span class="line">    mGLSurfaceView.setRenderer(<span class="keyword">new</span> SimpleTriangleRenderer());</span><br><span class="line">    <span class="comment">// 选择绘制模式为RENDERMODE_CONTINUOUSLY，表示不断刷新和绘制</span></span><br><span class="line">    <span class="comment">// 另一个模式为RENDERMODE_WHEN_DIRTY，仅在调用mGLSurfaceView.requestRender()时才绘制</span></span><br><span class="line">    mGLSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStart();</span><br><span class="line">    <span class="comment">// 恢复GL线程执行</span></span><br><span class="line">    mGLSurfaceView.onResume();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStop();</span><br><span class="line">    <span class="comment">// 暂停GL线程</span></span><br><span class="line">    mGLSurfaceView.onPause();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，<code>GLSurfaceView</code>的准备完毕。</p><h2 id="三、画笔"><a href="#三、画笔" class="headerlink" title="三、画笔"></a>三、画笔</h2><p>在上面的示例代码里，我们提到了“画笔”，这个画笔其实就是<code>GLSurfaceView.Renderer</code>接口的实现类。绘制一个简单的三角形，画笔并不需要复杂的准备，要做的仅仅时在执行绘制逻辑前把画布清空就可以了。</p><p>所以就有了世上最简单的画笔代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleRenderer</span> <span class="keyword">implements</span> <span class="title">GLSurfaceView</span>.<span class="title">Renderer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 承载绘制逻辑的Program</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DrawProgram mProgram;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleRenderer</span><span class="params">(DrawProgram program)</span> </span>&#123;</span><br><span class="line">        mProgram = program;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceCreated</span><span class="params">(GL10 gl, EGLConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 指定了清空画布颜色时使用的颜色：黑色</span></span><br><span class="line">        GLES20.glClearColor(<span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>);</span><br><span class="line">        <span class="comment">// 创建绘制程序</span></span><br><span class="line">        mProgram.createProgram(gl, config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceChanged</span><span class="params">(GL10 gl, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 以像素为单位，指定了视口的左下角（在第一象限内，以（0，0）为原点的）位置。width，height————表示这个视口矩形的宽度和高度，根据窗口的实时变化重绘窗口</span></span><br><span class="line">        GLES20.glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        mProgram.onSizeChanged(gl, width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawFrame</span><span class="params">(GL10 gl)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 清空颜色缓冲区，也就是用黑色来填充画布</span></span><br><span class="line">        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);</span><br><span class="line">        <span class="comment">// 执行绘制逻辑</span></span><br><span class="line">        mProgram.draw(gl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，世上最简画笔完成了。</p><h2 id="四、绘制逻辑–三角形"><a href="#四、绘制逻辑–三角形" class="headerlink" title="四、绘制逻辑–三角形"></a>四、绘制逻辑–三角形</h2><p>绘制一个三角形需要什么？我们知道，二维图形由点、线、面组成，所以我们首先要确定三个顶点（Vertex）。在OpenGL里，坐标系有x, y, z轴，因此我们的点一般有三个维度。</p><p>Vertex的坐标值取值范围是[-1, 1]，数据类型是float。</p><p>那就随便先写三个点吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span>[] VERTEX = &#123;</span><br><span class="line">    <span class="number">0f</span>, <span class="number">1f</span>, <span class="number">0f</span>, <span class="comment">// Surface顶部正中央</span></span><br><span class="line">    -<span class="number">0.5f</span>, -<span class="number">1f</span>, <span class="number">0f</span>, <span class="comment">// Surface 底部1/4宽度处</span></span><br><span class="line">    <span class="number">1f</span>, -<span class="number">1f</span>, <span class="number">0f</span> <span class="comment">// Surface底部最右侧</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为我们画的是2D三角形，所以Z坐标都为0，其实这里也可以不写Z坐标，用二维坐标即可，后面的代码做相应调整就可以了，为了教学方便，这里先用三维坐标。</p><p>定义了三个点以后，我们怎么把这三个点在OpenGL的世界里表现出来？</p><h3 id="1-Vertex-Shader"><a href="#1-Vertex-Shader" class="headerlink" title="1. Vertex Shader"></a>1. Vertex Shader</h3><p>《OpenGL基本概念》里提过的，OpenGL的渲染需要<code>Vertex Shader</code>和<code>Fragment Shader</code>，顾名思义，存放顶点需要用到<code>Vertex Shader</code>，说到Shader我们就要用到GLSL(OpenGL Shading Language)，GLSL以C语言为基础的高阶着色语言，可以在<a href="https://github.com/wshxbqq/GLSL-Card" target="_blank" rel="noopener">这里</a>简单了解下，现在大家先将就着看示例代码吧。</p><p>Vertex Shader代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于存放顶点的4维向量</span></span><br><span class="line">attribute vec4 aPosition;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 读取顶点</span></span><br><span class="line">  gl_Position = aPosition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GLSL程序使用一些特殊的内置变量来获取外部输入，<code>gl_Position</code>就是其中一个，用于存放顶点坐标信息，其数据类型为<code>vec4</code>，这也是为什么我们明明顶点是三维的，但是<code>aPosition</code>却要声明为<code>vec4</code>的原因。</p><h3 id="2-Fragment-Shader"><a href="#2-Fragment-Shader" class="headerlink" title="2. Fragment Shader"></a>2. Fragment Shader</h3><p>《OpenGL基本概念》里还提过光栅化(Rasterization)，也就是把点、线、三角形映射到屏幕上的像素点的过程，这个过程会生成<code>Fragment</code>，换句话说，我们要画的三角形就是一个<code>Fragment</code>，绘制<code>Fragment</code>的话就要准备Fragment Shader：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">precision mediump <span class="keyword">float</span>; <span class="comment">// 告诉GPU浮点运算只需要中等精度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  gl_FragColor = vec4(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// Fragment颜色 R G B A</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GLSL在进行光栅化着色的时候，会产生大量的浮点数运算，这些运算可能是当前设备不支持的，所以GLSL提供了3种浮点数精度，我们可以根据不同的设备来使用合适的精度。一般在Fragment Shader最开始的地方加上 <code>precision mediump float;</code> 便设定了默认的精度。这样所有没有显式表明精度的变量都会按照设定好的默认精度来处理。</p><p>跟<code>gl_Position</code>一样，<code>gl_FragColor</code>也是GLSL的内置变量，我们通过给该变量赋值从而实现给<code>Fragment</code>着色的效果。</p><h3 id="3-创建GLSL程序容器"><a href="#3-创建GLSL程序容器" class="headerlink" title="3. 创建GLSL程序容器"></a>3. 创建GLSL程序容器</h3><p>在准备好<code>Vertex Shader</code>和<code>Fragment Shader</code>后，我们就会想（或者说我会想）怎么使用这两个Shader？这就需要我们创建一个GLSL程序来装载两个Shader，都到这了我就不废话了，请看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createProgram</span><span class="params">(GL10 gl, EGLConfig config)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建GLSL程序对象并获取其句柄</span></span><br><span class="line">  <span class="keyword">int</span> programHandle = GLES20.glCreateProgram();</span><br><span class="line">  <span class="comment">// 加载vertex和fragment的shader</span></span><br><span class="line">  <span class="keyword">int</span> vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, VERTEX_SHADER);</span><br><span class="line">  <span class="keyword">int</span> fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER, FRAGMENT_SHADER);</span><br><span class="line">  <span class="comment">// attach vertex和fragment shader到GLSL程序中</span></span><br><span class="line">  GLES20.glAttachShader(programHandle, vertexShader);</span><br><span class="line">  GLES20.glAttachShader(programHandle, fragmentShader);</span><br><span class="line">  <span class="comment">// 链接并启用GLSL程序</span></span><br><span class="line">  GLES20.glLinkProgram(programHandle);</span><br><span class="line">  GLES20.glUseProgram(programHandle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">loadShader</span><span class="params">(<span class="keyword">int</span> type, String shaderCode)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建Shader程序并获取其句柄</span></span><br><span class="line">  <span class="keyword">int</span> shader = GLES20.glCreateShader(type);</span><br><span class="line">  <span class="comment">// 指定Shader源码并绑定</span></span><br><span class="line">  GLES20.glShaderSource(shader, shaderCode);</span><br><span class="line">  <span class="comment">// 编译Shader程序</span></span><br><span class="line">  GLES20.glCompileShader(shader);</span><br><span class="line">  <span class="keyword">return</span> shader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GLES20.glLinkProgram(programHandle);</code>语句，直译就是“链接”GLSL程序，“链接”可以理解为讲编译后并与programHandle attach的Shaders都转换为可以直接在GPU内对应的处理器中（Vertex Processor和Fragment Processor）运行的可执行文件，完整描述可以看<a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glLinkProgram.xhtml" target="_blank" rel="noopener">glLinkProgram Description</a>。</p><p><code>GLES20.glUseProgram(programHandle);</code>则是把已经attach了Shader和link成功后的GLSL程序投入使用，调用该语句后，后续对Shader对象的操作都不会影响到已经投入使用的GLSL程序了，这种时候可以手动删除两个Shader对象来释放资源。</p><h3 id="4-数据准备"><a href="#4-数据准备" class="headerlink" title="4. 数据准备"></a>4. 数据准备</h3><p>在大费周章准备好Vertex Shader，Fragment Shader和GLSL程序后，我们还欠缺关键的一步，就是把数据（三角形的三个顶点）传给Vertex Shader。</p><h4 id="4-1-FloatBuffer"><a href="#4-1-FloatBuffer" class="headerlink" title="4.1 FloatBuffer"></a>4.1 FloatBuffer</h4><p>由于OpenGL API限制的原因，我们定义的float数组并不能直接使用，为此，我们要用到Java nio包下的<code>FloatBuffer</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span>[] VERTEX = &#123;</span><br><span class="line">    <span class="number">0f</span>, <span class="number">1f</span>, <span class="number">0f</span>, <span class="comment">// Surface顶部正中央</span></span><br><span class="line">    -<span class="number">0.5f</span>, -<span class="number">1f</span>, <span class="number">0f</span>, <span class="comment">// Surface 底部1/4宽度处</span></span><br><span class="line">    <span class="number">1f</span>, -<span class="number">1f</span>, <span class="number">0f</span> <span class="comment">// Surface底部最右侧</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 每个float是4个bytes</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZEOF_FLOAT = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">FloatBuffer vertexBuffer = ByteBuffer.allocateDirect(VERTEX.length * SIZEOF_FLOAT)</span><br><span class="line">                .order(ByteOrder.nativeOrder())</span><br><span class="line">                .asFloatBuffer()</span><br><span class="line">                .put(VERTEX);</span><br></pre></td></tr></table></figure><p>如上面代码所示，我们创建了一个 9x4 = 36个bytes的<code>FloatBuffer</code>，字节排序顺序跟当前设备保持一致，内容就是我们定义的<code>VERTEX</code>数组。</p><h4 id="4-2-传递数据"><a href="#4-2-传递数据" class="headerlink" title="4.2 传递数据"></a>4.2 传递数据</h4><p>传递数据的代码就三句，但是内容量不少：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从GLSL程序中获取Vertex Shader里的aPosition的句柄</span></span><br><span class="line"><span class="keyword">int</span> positionLoc = GLES20.glGetAttribLocation(programHandle, <span class="string">"aPosition"</span>);</span><br><span class="line"><span class="comment">// 启用aPosition</span></span><br><span class="line">GLES20.glEnableVertexAttribArray(positionLoc);</span><br><span class="line"><span class="comment">// 把mVertexBuffer中存储的VERTEX数组的值赋给Vertex Shader程序中的aPosition</span></span><br><span class="line"><span class="comment">// 因为每个顶点都是3维的，所以size是3，stride的值一般是 顶点数x数据类型占用的byte数，float是4个bytes，所以stride = 12</span></span><br><span class="line">GLES20.glVertexAttribPointer(positionLoc, <span class="number">3</span>, GLES20.GL_FLOAT, <span class="keyword">false</span>, <span class="number">12</span>, mVertexBuffer);</span><br></pre></td></tr></table></figure><p>逐句分析</p><p><code>int positionLoc = GLES20.glGetAttribLocation(programHandle, &quot;aPosition&quot;);</code></p><p>在<code>GLES20.glUseProgram(programHandle);</code>后，我们用上述语句获取<code>Vertex Shader</code>中定义的<code>attribute vec4 aPosition</code>变量的句柄（可以理解为这个变量的native引用）。</p><p>随后我们用<code>GLES20.glEnableVertexAttribArray(positionLoc);</code>启用了<code>aPosition</code>attribute，为什么要做这一步呢？因为OpenGL出于性能考虑，在默认情况下，所有Vertex Shader的attribute变量都是关闭的，这意味着数据在Shader端是不可见的，如果不通过显式地调用<code>GLES20.glEnableVertexAttribArray(positionLoc);</code>的话，GLSL程序渲染时就无法获取到我们传入的顶点坐标，也就无法进行绘制操作了。</p><p>最后，我们通过<code>GLES20.glVertexAttribPointer(positionLoc, 3, GLES20.GL_FLOAT, false, 12, vertexBuffer);</code>把前边创建好的<code>FloatBuffer vertexBuffer</code>传给<code>Vertex Shader</code>的<code>attribute vec4 aPosition</code>变量。在该句中，我们声明了<code>vertexBuffer</code>中有每个顶点都是三维的，顶点坐标的数据类型是<code>GLES20.GL_FLOAT</code>，不需要标准化数据，每个顶点占用12个bytes（三维坐标，也就是三个float，每个float是4 bytes）。</p><p>至此，我们的数据也准备完毕了。</p><h3 id="5-绘制"><a href="#5-绘制" class="headerlink" title="5. 绘制"></a>5. 绘制</h3><p>铺垫了那么久，总算到了我们蓄谋已久的绘制环节了，下面就是完整的绘制三角形的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>调用<code>GLES20.glDrawArrays</code>方法之后，GLSL程序会遍历所有enable的数组，按顺序构造出指定的基本图元并绘制出来。</p><p>该方法接受3个参数，第一个是mode，表示我们要绘制的图元类型，这里传值</p><p><code>GLES20.GL_TRIANGLES</code>，表示我们要画三角形。后两个参数分别是first和count，</p><p>相信这两个参数我不说大家也知道是咋回事。</p><h2 id="五、示例代码"><a href="#五、示例代码" class="headerlink" title="五、示例代码"></a>五、示例代码</h2><p>搞了个OpenGLDemo工程，后续授课的示例代码都会放在里边。本期代码可以在该工程的<code>TriangleDemoActivity</code>里顺藤摸瓜地看。</p><p>Git工程地址：<a href="https://github.com/TchaikovDriver/OpenGLDemo" target="_blank" rel="noopener">https://github.com/TchaikovDriver/OpenGLDemo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-2-绘制三角形&quot;&gt;&lt;a href=&quot;#1-2-绘制三角形&quot; class=&quot;headerlink&quot; title=&quot;1.2 绘制三角形&quot;&gt;&lt;/a&gt;1.2 绘制三角形&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、扯淡&quot;&gt;&lt;a href=&quot;#一、扯淡&quot; cl
      
    
    </summary>
    
      <category term="OpenGL ES" scheme="https://tchaikovdriver.github.io/categories/OpenGL-ES/"/>
    
    
      <category term="OpenGL ES" scheme="https://tchaikovdriver.github.io/tags/OpenGL-ES/"/>
    
  </entry>
  
  <entry>
    <title>1.1 OpenGL基本概念介绍</title>
    <link href="https://tchaikovdriver.github.io/2018/09/16/1-1-OpenGL%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/"/>
    <id>https://tchaikovdriver.github.io/2018/09/16/1-1-OpenGL基本概念介绍/</id>
    <published>2018-09-16T11:45:01.000Z</published>
    <updated>2018-09-16T13:42:53.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-1-基本概念介绍"><a href="#1-1-基本概念介绍" class="headerlink" title="1.1 基本概念介绍"></a>1.1 基本概念介绍</h1><p>[TOC]</p><h2 id="一、什么是OpenGL-ES？"><a href="#一、什么是OpenGL-ES？" class="headerlink" title="一、什么是OpenGL ES？"></a>一、什么是OpenGL ES？</h2><p>OpenGL(Open Graphics Library) 是一套标准的用于渲染2D、3D矢量图形的跨语言、跨平台的应用程序编程接口（API）。而OpenGL ES(Open Graphics Library for Embedded Systems)，顾名思义，是为嵌入式系统（如移动设备的系统）特殊定制的API，去除了glBegin/glEnd，四边形（GL_QUADS）、多边形（GL_POLYGONS）等复杂图元等许多非绝对必要的特性。本次学习的OpenGL ES版本为2.0，是基于OpenGL 3.0裁剪定制而成的。</p><h3 id="1-OpenGL功能概述"><a href="#1-OpenGL功能概述" class="headerlink" title="1. OpenGL功能概述"></a>1. OpenGL功能概述</h3><ul><li>图形基本组成要素（What）：Point, Edge, Polygon</li><li>属性Attribute（How）</li><li>Transformation - Viewing and Modeling<br>从运行过程来看，OpenGL其实是一个有限状态机（finite state machine）</li></ul><h3 id="2-OpenGL函数命名规则"><a href="#2-OpenGL函数命名规则" class="headerlink" title="2. OpenGL函数命名规则"></a>2. OpenGL函数命名规则</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/OpenGLFunctionNaming.jpg" alt="OpenGLFunctionNaming" title="">                </div>                <div class="image-caption">OpenGLFunctionNaming</div>            </figure><h3 id="3-OpenGL应用程序的运作流程"><a href="#3-OpenGL应用程序的运作流程" class="headerlink" title="3. OpenGL应用程序的运作流程"></a>3. OpenGL应用程序的运作流程</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/OpenGLProgramBaseStructure.png" alt="OpenGLProgramBaseStructure" title="">                </div>                <div class="image-caption">OpenGLProgramBaseStructure</div>            </figure><p>一个交互式的OpenGL应用程序一般流程如下：</p><ul><li>配置并创建一个窗口，用于OpenGL输出</li><li>初始化一些在整个应用程序运行期间所需的OpenGL状态值</li><li>处理用户事件，如键盘输入、触摸事件、鼠标移动或者改变窗口大小等</li><li>根据用户的输入，改变OpenGL状态值，在窗口中绘制图像</li></ul><p>可以看出，OpenGL是非面向对象而是面向过程的，开发者需要维护一个状态机，根据用户的输入而改变OpenGL的状态，状态的变更会触发新图像的绘制，最终通过无限循环来实现交互效果。</p><h2 id="二、OpenGL基本概念"><a href="#二、OpenGL基本概念" class="headerlink" title="二、OpenGL基本概念"></a>二、OpenGL基本概念</h2><p>在OpenGL ES中，由于去掉了多边形这种复杂图元，所以只剩下点、线和三角形这三类图元。下面将围绕这三类图元讲诉OpenGL中的一些基本概念。</p><h3 id="1-Vertex"><a href="#1-Vertex" class="headerlink" title="1. Vertex"></a>1. Vertex</h3><p>Vertex就是顶点的意思，一切图形都有Vertex，Vertex序列可以围成一个图形。</p><h3 id="2-Fragment-amp-Rasterization"><a href="#2-Fragment-amp-Rasterization" class="headerlink" title="2. Fragment &amp; Rasterization"></a>2. Fragment &amp; Rasterization</h3><p>光栅化（Rasterization）是指将点、线、三角形映射到屏幕上的像素点的过程，每个映射区域叫作Fragment，换句话说，光栅化就是生成Fragment的过程。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/rasterization_generate_fragments.png" alt="RasterizationAndFragment" title="">                </div>                <div class="image-caption">RasterizationAndFragment</div>            </figure><h3 id="3-Shader"><a href="#3-Shader" class="headerlink" title="3. Shader"></a>3. Shader</h3><p>着色器程序（Shader）用于描述如何绘制（渲染），OpenGL包含了GLSL（OpenGL ShadingLanguage），是一门编程语言，语法与C语言类似。OpenGL渲染需要两种Shader: Vertex Shader和Fragment Shader。<br>Shader的最终目的就是确定图形的Vertex坐标和Fragment颜色，我们想要用 OpenGL 实现任何效果，无论是静止的光影、色彩、形状，还是运动的物理效果、粒子效果，归根结底都是要根据时间和位置确定Vertex坐标和Fragment颜色。</p><p>下面是绘制一个红色三角形所需要的最简单的Vertex Shader和Fragment Shader的代码示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vertex Shader</span></span><br><span class="line">attribute vec4 aPosition; <span class="comment">// 存储了三角形三个点的向量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  gl_Position = aPosition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fragment Shader</span></span><br><span class="line">precision mediump <span class="keyword">float</span>; <span class="comment">// 告诉GPU在浮点数计算时使用中等精度就可以了</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  gl_FragColor = vec4(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// R G B A, 红色三角形</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-坐标系"><a href="#4-坐标系" class="headerlink" title="4. 坐标系"></a>4. 坐标系</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ovl0w8qm7.bkt.clouddn.com/opengl_coordinate_systems.png" alt="OpenGLCoordinateSystem" title="">                </div>                <div class="image-caption">OpenGLCoordinateSystem</div>            </figure><p>下面这张图展示了 OpenGL 通常的处理流程中各个环节的坐标系，以及坐标系之间的转换操作：</p><ul><li>Local space：我们为每个物体建好模型的时候，它们的坐标就是 Local space 坐标；</li><li>World space：当我们要绘制多个物体时，如果直接使用 Local space 的坐标（把所有物体的原点放在一起），它们可能会发生重叠，因此我们需要把它们进行合理的移动、排布，最终各自的坐标就是 World space 的坐标了；</li><li>Model matrix：把 Local space 坐标转换到 World space 坐标所使用的变换矩阵，它是针对每个物体做不同的变换；</li><li>View space：通常也叫 Camera space 或者 Eye space，是从观察者（也就是我们自己）所在的位置出发，所看到的空间；</li><li>View matrix：把 World space 坐标转换到 View space 坐标所使用的变换矩阵，它相当于是在移动相机位置，实际上是反方向移动整个场景（所有物体）；</li><li>Clip space：OpenGL 只会渲染坐标值范围在 <code>[-1, 1]</code> 的内容，超出这个范围的内容都会被裁剪掉，这个范围的空间就叫 Clip space，Clip space 的坐标系也叫 Normalized Device Coordinate（NDC）；</li><li>Projection matrix：把 View space 坐标转换到 Clip space 坐标所使用的变换矩阵，它会指定一个可见的范围，只有这个范围内的点才会转换到 NDC 中，而这个范围被称作视锥（Frustum）；projection matrix 有三种创建方式：正投影（Orthographic projection），透视投影（Perspective projection），以及 3D 投影（3D projection）；前两种比较常用；</li><li>Screen space：屏幕上的空间，<code>glViewport</code> 调用指定的区域；</li><li>Viewport transform：这一步是 OpenGL 自动完成的，把 Clip space 坐标转换到 Screen space 坐标；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-1-基本概念介绍&quot;&gt;&lt;a href=&quot;#1-1-基本概念介绍&quot; class=&quot;headerlink&quot; title=&quot;1.1 基本概念介绍&quot;&gt;&lt;/a&gt;1.1 基本概念介绍&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、什么是OpenGL-ES？&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="OpenGL ES" scheme="https://tchaikovdriver.github.io/categories/OpenGL-ES/"/>
    
    
      <category term="OpenGL ES" scheme="https://tchaikovdriver.github.io/tags/OpenGL-ES/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tchaikovdriver.github.io/2018/09/16/hello-world/"/>
    <id>https://tchaikovdriver.github.io/2018/09/16/hello-world/</id>
    <published>2018-09-16T03:25:16.175Z</published>
    <updated>2018-09-16T03:25:16.175Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
